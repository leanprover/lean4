import Grove.Framework

/-
This file is autogenerated by grove. You can manually edit it, for example to resolve merge
conflicts, but be careful.
-/

open Grove.Framework Widget

namespace GroveStdlib.Generated.«associative-query-operations»

def «01f88623-fa5f-4380-9772-b30f2fec5c94» : AssociationTable.Fact .subexpression where
  widgetId := "associative-query-operations"
  factId := "01f88623-fa5f-4380-9772-b30f2fec5c94"
  rowId := "01f88623-fa5f-4380-9772-b30f2fec5c94"
  rowState := #[⟨"Std.DHashMap", "Std.DHashMap.isEmpty", .declaration (Declaration.def {
    name := `Std.DHashMap.isEmpty
    renderedStatement := "Std.DHashMap.isEmpty.{u, v} {α : Type u} {β : α → Type v} {x✝ : BEq α} {x✝¹ : Hashable α} (m : Std.DHashMap α β) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.DHashMap.Raw", "Std.DHashMap.Raw.isEmpty", .declaration (Declaration.def {
    name := `Std.DHashMap.Raw.isEmpty
    renderedStatement := "Std.DHashMap.Raw.isEmpty.{u, v} {α : Type u} {β : α → Type v} (m : Std.DHashMap.Raw α β) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtDHashMap", "Std.ExtDHashMap.isEmpty", .declaration (Declaration.def {
    name := `Std.ExtDHashMap.isEmpty
    renderedStatement := "Std.ExtDHashMap.isEmpty.{u, v} {α : Type u} {β : α → Type v} {x✝ : BEq α} {x✝¹ : Hashable α} [EquivBEq α]\n  [LawfulHashable α] (m : Std.ExtDHashMap α β) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.DTreeMap", "Std.DTreeMap.isEmpty", .declaration (Declaration.def {
    name := `Std.DTreeMap.isEmpty
    renderedStatement := "Std.DTreeMap.isEmpty.{u, v} {α : Type u} {β : α → Type v} {cmp : α → α → Ordering} (t : Std.DTreeMap α β cmp) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.DTreeMap.Raw", "Std.DTreeMap.Raw.isEmpty", .declaration (Declaration.def {
    name := `Std.DTreeMap.Raw.isEmpty
    renderedStatement := "Std.DTreeMap.Raw.isEmpty.{u, v} {α : Type u} {β : α → Type v} {cmp : α → α → Ordering} (t : Std.DTreeMap.Raw α β cmp) :\n  Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtDTreeMap", "Std.ExtDTreeMap.isEmpty", .declaration (Declaration.def {
    name := `Std.ExtDTreeMap.isEmpty
    renderedStatement := "Std.ExtDTreeMap.isEmpty.{u, v} {α : Type u} {β : α → Type v} {cmp : α → α → Ordering} (t : Std.ExtDTreeMap α β cmp) :\n  Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.HashMap", "Std.HashMap.isEmpty", .declaration (Declaration.def {
    name := `Std.HashMap.isEmpty
    renderedStatement := "Std.HashMap.isEmpty.{u, v} {α : Type u} {β : Type v} {x✝ : BEq α} {x✝¹ : Hashable α} (m : Std.HashMap α β) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.HashMap.Raw", "Std.HashMap.Raw.isEmpty", .declaration (Declaration.def {
    name := `Std.HashMap.Raw.isEmpty
    renderedStatement := "Std.HashMap.Raw.isEmpty.{u, v} {α : Type u} {β : Type v} (m : Std.HashMap.Raw α β) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtHashMap", "Std.ExtHashMap.isEmpty", .declaration (Declaration.def {
    name := `Std.ExtHashMap.isEmpty
    renderedStatement := "Std.ExtHashMap.isEmpty.{u, v} {α : Type u} {β : Type v} {x✝ : BEq α} {x✝¹ : Hashable α} [EquivBEq α] [LawfulHashable α]\n  (m : Std.ExtHashMap α β) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeMap", "Std.TreeMap.isEmpty", .declaration (Declaration.def {
    name := `Std.TreeMap.isEmpty
    renderedStatement := "Std.TreeMap.isEmpty.{u, v} {α : Type u} {β : Type v} {cmp : α → α → Ordering} (t : Std.TreeMap α β cmp) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeMap.Raw", "Std.TreeMap.Raw.isEmpty", .declaration (Declaration.def {
    name := `Std.TreeMap.Raw.isEmpty
    renderedStatement := "Std.TreeMap.Raw.isEmpty.{u, v} {α : Type u} {β : Type v} {cmp : α → α → Ordering} (t : Std.TreeMap.Raw α β cmp) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtTreeMap", "Std.ExtTreeMap.isEmpty", .declaration (Declaration.def {
    name := `Std.ExtTreeMap.isEmpty
    renderedStatement := "Std.ExtTreeMap.isEmpty.{u, v} {α : Type u} {β : Type v} {cmp : α → α → Ordering} (t : Std.ExtTreeMap α β cmp) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.HashSet", "Std.HashSet.isEmpty", .declaration (Declaration.def {
    name := `Std.HashSet.isEmpty
    renderedStatement := "Std.HashSet.isEmpty.{u} {α : Type u} {x✝ : BEq α} {x✝¹ : Hashable α} (m : Std.HashSet α) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.HashSet.Raw", "Std.HashSet.Raw.isEmpty", .declaration (Declaration.def {
    name := `Std.HashSet.Raw.isEmpty
    renderedStatement := "Std.HashSet.Raw.isEmpty.{u} {α : Type u} (m : Std.HashSet.Raw α) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtHashSet", "Std.ExtHashSet.isEmpty", .declaration (Declaration.def {
    name := `Std.ExtHashSet.isEmpty
    renderedStatement := "Std.ExtHashSet.isEmpty.{u} {α : Type u} {x✝ : BEq α} {x✝¹ : Hashable α} [EquivBEq α] [LawfulHashable α]\n  (m : Std.ExtHashSet α) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeSet", "Std.TreeSet.isEmpty", .declaration (Declaration.def {
    name := `Std.TreeSet.isEmpty
    renderedStatement := "Std.TreeSet.isEmpty.{u} {α : Type u} {cmp : α → α → Ordering} (t : Std.TreeSet α cmp) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeSet.Raw", "Std.TreeSet.Raw.isEmpty", .declaration (Declaration.def {
    name := `Std.TreeSet.Raw.isEmpty
    renderedStatement := "Std.TreeSet.Raw.isEmpty.{u} {α : Type u} {cmp : α → α → Ordering} (t : Std.TreeSet.Raw α cmp) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtTreeSet", "Std.ExtTreeSet.isEmpty", .declaration (Declaration.def {
    name := `Std.ExtTreeSet.isEmpty
    renderedStatement := "Std.ExtTreeSet.isEmpty.{u} {α : Type u} {cmp : α → α → Ordering} (t : Std.ExtTreeSet α cmp) : Bool"
    isDeprecated := false
  }
)⟩,]
  metadata := {
    status := .done
    comment := ""
  }
def «f084f852-af71-45b6-8ab3-d251a8144f72» : AssociationTable.Fact .subexpression where
  widgetId := "associative-query-operations"
  factId := "f084f852-af71-45b6-8ab3-d251a8144f72"
  rowId := "f084f852-af71-45b6-8ab3-d251a8144f72"
  rowState := #[⟨"Std.DHashMap", "Std.DHashMap.size", .declaration (Declaration.def {
    name := `Std.DHashMap.size
    renderedStatement := "Std.DHashMap.size.{u, v} {α : Type u} {β : α → Type v} {x✝ : BEq α} {x✝¹ : Hashable α} (m : Std.DHashMap α β) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.DHashMap.Raw", "Std.DHashMap.Raw.size", .declaration (Declaration.def {
    name := `Std.DHashMap.Raw.size
    renderedStatement := "Std.DHashMap.Raw.size.{u, v} {α : Type u} {β : α → Type v} (self : Std.DHashMap.Raw α β) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtDHashMap", "Std.ExtDHashMap.size", .declaration (Declaration.def {
    name := `Std.ExtDHashMap.size
    renderedStatement := "Std.ExtDHashMap.size.{u, v} {α : Type u} {β : α → Type v} {x✝ : BEq α} {x✝¹ : Hashable α} [EquivBEq α]\n  [LawfulHashable α] (m : Std.ExtDHashMap α β) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.DTreeMap", "Std.DTreeMap.size", .declaration (Declaration.def {
    name := `Std.DTreeMap.size
    renderedStatement := "Std.DTreeMap.size.{u, v} {α : Type u} {β : α → Type v} {cmp : α → α → Ordering} (t : Std.DTreeMap α β cmp) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.DTreeMap.Raw", "Std.DTreeMap.Raw.size", .declaration (Declaration.def {
    name := `Std.DTreeMap.Raw.size
    renderedStatement := "Std.DTreeMap.Raw.size.{u, v} {α : Type u} {β : α → Type v} {cmp : α → α → Ordering} (t : Std.DTreeMap.Raw α β cmp) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtDTreeMap", "Std.ExtDTreeMap.size", .declaration (Declaration.def {
    name := `Std.ExtDTreeMap.size
    renderedStatement := "Std.ExtDTreeMap.size.{u, v} {α : Type u} {β : α → Type v} {cmp : α → α → Ordering} (t : Std.ExtDTreeMap α β cmp) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.HashMap", "Std.HashMap.size", .declaration (Declaration.def {
    name := `Std.HashMap.size
    renderedStatement := "Std.HashMap.size.{u, v} {α : Type u} {β : Type v} {x✝ : BEq α} {x✝¹ : Hashable α} (m : Std.HashMap α β) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.HashMap.Raw", "Std.HashMap.Raw.size", .declaration (Declaration.def {
    name := `Std.HashMap.Raw.size
    renderedStatement := "Std.HashMap.Raw.size.{u, v} {α : Type u} {β : Type v} (m : Std.HashMap.Raw α β) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtHashMap", "Std.ExtHashMap.size", .declaration (Declaration.def {
    name := `Std.ExtHashMap.size
    renderedStatement := "Std.ExtHashMap.size.{u, v} {α : Type u} {β : Type v} {x✝ : BEq α} {x✝¹ : Hashable α} [EquivBEq α] [LawfulHashable α]\n  (m : Std.ExtHashMap α β) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeMap", "Std.TreeMap.size", .declaration (Declaration.def {
    name := `Std.TreeMap.size
    renderedStatement := "Std.TreeMap.size.{u, v} {α : Type u} {β : Type v} {cmp : α → α → Ordering} (t : Std.TreeMap α β cmp) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeMap.Raw", "Std.TreeMap.Raw.size", .declaration (Declaration.def {
    name := `Std.TreeMap.Raw.size
    renderedStatement := "Std.TreeMap.Raw.size.{u, v} {α : Type u} {β : Type v} {cmp : α → α → Ordering} (t : Std.TreeMap.Raw α β cmp) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtTreeMap", "Std.ExtTreeMap.size", .declaration (Declaration.def {
    name := `Std.ExtTreeMap.size
    renderedStatement := "Std.ExtTreeMap.size.{u, v} {α : Type u} {β : Type v} {cmp : α → α → Ordering} (t : Std.ExtTreeMap α β cmp) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.HashSet", "Std.HashSet.size", .declaration (Declaration.def {
    name := `Std.HashSet.size
    renderedStatement := "Std.HashSet.size.{u} {α : Type u} {x✝ : BEq α} {x✝¹ : Hashable α} (m : Std.HashSet α) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.HashSet.Raw", "Std.HashSet.Raw.size", .declaration (Declaration.def {
    name := `Std.HashSet.Raw.size
    renderedStatement := "Std.HashSet.Raw.size.{u} {α : Type u} (m : Std.HashSet.Raw α) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtHashSet", "Std.ExtHashSet.size", .declaration (Declaration.def {
    name := `Std.ExtHashSet.size
    renderedStatement := "Std.ExtHashSet.size.{u} {α : Type u} {x✝ : BEq α} {x✝¹ : Hashable α} [EquivBEq α] [LawfulHashable α]\n  (m : Std.ExtHashSet α) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeSet", "Std.TreeSet.size", .declaration (Declaration.def {
    name := `Std.TreeSet.size
    renderedStatement := "Std.TreeSet.size.{u} {α : Type u} {cmp : α → α → Ordering} (t : Std.TreeSet α cmp) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeSet.Raw", "Std.TreeSet.Raw.size", .declaration (Declaration.def {
    name := `Std.TreeSet.Raw.size
    renderedStatement := "Std.TreeSet.Raw.size.{u} {α : Type u} {cmp : α → α → Ordering} (t : Std.TreeSet.Raw α cmp) : Nat"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtTreeSet", "Std.ExtTreeSet.size", .declaration (Declaration.def {
    name := `Std.ExtTreeSet.size
    renderedStatement := "Std.ExtTreeSet.size.{u} {α : Type u} {cmp : α → α → Ordering} (t : Std.ExtTreeSet α cmp) : Nat"
    isDeprecated := false
  }
)⟩,]
  metadata := {
    status := .done
    comment := ""
  }
def «f4e6fa70-5aed-439d-aaad-5f4ced65bf7b» : AssociationTable.Fact .subexpression where
  widgetId := "associative-query-operations"
  factId := "f4e6fa70-5aed-439d-aaad-5f4ced65bf7b"
  rowId := "f4e6fa70-5aed-439d-aaad-5f4ced65bf7b"
  rowState := #[⟨"Std.DTreeMap", "Std.DTreeMap.any", .declaration (Declaration.def {
    name := `Std.DTreeMap.any
    renderedStatement := "Std.DTreeMap.any.{u, v} {α : Type u} {β : α → Type v} {cmp : α → α → Ordering} (t : Std.DTreeMap α β cmp)\n  (p : (a : α) → β a → Bool) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.DTreeMap.Raw", "Std.DTreeMap.Raw.any", .declaration (Declaration.def {
    name := `Std.DTreeMap.Raw.any
    renderedStatement := "Std.DTreeMap.Raw.any.{u, v} {α : Type u} {β : α → Type v} {cmp : α → α → Ordering} (t : Std.DTreeMap.Raw α β cmp)\n  (p : (a : α) → β a → Bool) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtDTreeMap", "Std.ExtDTreeMap.any", .declaration (Declaration.def {
    name := `Std.ExtDTreeMap.any
    renderedStatement := "Std.ExtDTreeMap.any.{u, v} {α : Type u} {β : α → Type v} {cmp : α → α → Ordering} [Std.TransCmp cmp]\n  (t : Std.ExtDTreeMap α β cmp) (p : (a : α) → β a → Bool) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeMap", "Std.TreeMap.any", .declaration (Declaration.def {
    name := `Std.TreeMap.any
    renderedStatement := "Std.TreeMap.any.{u, v} {α : Type u} {β : Type v} {cmp : α → α → Ordering} (t : Std.TreeMap α β cmp) (p : α → β → Bool) :\n  Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeMap.Raw", "Std.TreeMap.Raw.any", .declaration (Declaration.def {
    name := `Std.TreeMap.Raw.any
    renderedStatement := "Std.TreeMap.Raw.any.{u, v} {α : Type u} {β : Type v} {cmp : α → α → Ordering} (t : Std.TreeMap.Raw α β cmp)\n  (p : α → β → Bool) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtTreeMap", "Std.ExtTreeMap.any", .declaration (Declaration.def {
    name := `Std.ExtTreeMap.any
    renderedStatement := "Std.ExtTreeMap.any.{u, v} {α : Type u} {β : Type v} {cmp : α → α → Ordering} [Std.TransCmp cmp]\n  (t : Std.ExtTreeMap α β cmp) (p : α → β → Bool) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.HashSet", "Std.HashSet.any", .declaration (Declaration.def {
    name := `Std.HashSet.any
    renderedStatement := "Std.HashSet.any.{u} {α : Type u} {x✝ : BEq α} {x✝¹ : Hashable α} (m : Std.HashSet α) (p : α → Bool) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.HashSet.Raw", "Std.HashSet.Raw.any", .declaration (Declaration.def {
    name := `Std.HashSet.Raw.any
    renderedStatement := "Std.HashSet.Raw.any.{u} {α : Type u} (m : Std.HashSet.Raw α) (p : α → Bool) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeSet", "Std.TreeSet.any", .declaration (Declaration.def {
    name := `Std.TreeSet.any
    renderedStatement := "Std.TreeSet.any.{u} {α : Type u} {cmp : α → α → Ordering} (t : Std.TreeSet α cmp) (p : α → Bool) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.TreeSet.Raw", "Std.TreeSet.Raw.any", .declaration (Declaration.def {
    name := `Std.TreeSet.Raw.any
    renderedStatement := "Std.TreeSet.Raw.any.{u} {α : Type u} {cmp : α → α → Ordering} (t : Std.TreeSet.Raw α cmp) (p : α → Bool) : Bool"
    isDeprecated := false
  }
)⟩,⟨"Std.ExtTreeSet", "Std.ExtTreeSet.any", .declaration (Declaration.def {
    name := `Std.ExtTreeSet.any
    renderedStatement := "Std.ExtTreeSet.any.{u} {α : Type u} {cmp : α → α → Ordering} [Std.TransCmp cmp] (t : Std.ExtTreeSet α cmp)\n  (p : α → Bool) : Bool"
    isDeprecated := false
  }
)⟩,]
  metadata := {
    status := .bad
    comment := "Missing for some containers"
  }

def table : AssociationTable.Data .subexpression where
  widgetId := "associative-query-operations"
  rows := #[
    ⟨"01f88623-fa5f-4380-9772-b30f2fec5c94", "isEmpty", #[⟨"Std.DHashMap", "Std.DHashMap.isEmpty"⟩,⟨"Std.DHashMap.Raw", "Std.DHashMap.Raw.isEmpty"⟩,⟨"Std.ExtDHashMap", "Std.ExtDHashMap.isEmpty"⟩,⟨"Std.DTreeMap", "Std.DTreeMap.isEmpty"⟩,⟨"Std.DTreeMap.Raw", "Std.DTreeMap.Raw.isEmpty"⟩,⟨"Std.ExtDTreeMap", "Std.ExtDTreeMap.isEmpty"⟩,⟨"Std.HashMap", "Std.HashMap.isEmpty"⟩,⟨"Std.HashMap.Raw", "Std.HashMap.Raw.isEmpty"⟩,⟨"Std.ExtHashMap", "Std.ExtHashMap.isEmpty"⟩,⟨"Std.TreeMap", "Std.TreeMap.isEmpty"⟩,⟨"Std.TreeMap.Raw", "Std.TreeMap.Raw.isEmpty"⟩,⟨"Std.ExtTreeMap", "Std.ExtTreeMap.isEmpty"⟩,⟨"Std.HashSet", "Std.HashSet.isEmpty"⟩,⟨"Std.HashSet.Raw", "Std.HashSet.Raw.isEmpty"⟩,⟨"Std.ExtHashSet", "Std.ExtHashSet.isEmpty"⟩,⟨"Std.TreeSet", "Std.TreeSet.isEmpty"⟩,⟨"Std.TreeSet.Raw", "Std.TreeSet.Raw.isEmpty"⟩,⟨"Std.ExtTreeSet", "Std.ExtTreeSet.isEmpty"⟩,]⟩,
    ⟨"f084f852-af71-45b6-8ab3-d251a8144f72", "size", #[⟨"Std.DHashMap", "Std.DHashMap.size"⟩,⟨"Std.DHashMap.Raw", "Std.DHashMap.Raw.size"⟩,⟨"Std.ExtDHashMap", "Std.ExtDHashMap.size"⟩,⟨"Std.DTreeMap", "Std.DTreeMap.size"⟩,⟨"Std.DTreeMap.Raw", "Std.DTreeMap.Raw.size"⟩,⟨"Std.ExtDTreeMap", "Std.ExtDTreeMap.size"⟩,⟨"Std.HashMap", "Std.HashMap.size"⟩,⟨"Std.HashMap.Raw", "Std.HashMap.Raw.size"⟩,⟨"Std.ExtHashMap", "Std.ExtHashMap.size"⟩,⟨"Std.TreeMap", "Std.TreeMap.size"⟩,⟨"Std.TreeMap.Raw", "Std.TreeMap.Raw.size"⟩,⟨"Std.ExtTreeMap", "Std.ExtTreeMap.size"⟩,⟨"Std.HashSet", "Std.HashSet.size"⟩,⟨"Std.HashSet.Raw", "Std.HashSet.Raw.size"⟩,⟨"Std.ExtHashSet", "Std.ExtHashSet.size"⟩,⟨"Std.TreeSet", "Std.TreeSet.size"⟩,⟨"Std.TreeSet.Raw", "Std.TreeSet.Raw.size"⟩,⟨"Std.ExtTreeSet", "Std.ExtTreeSet.size"⟩,]⟩,
    ⟨"f4e6fa70-5aed-439d-aaad-5f4ced65bf7b", "any", #[⟨"Std.DTreeMap", "Std.DTreeMap.any"⟩,⟨"Std.DTreeMap.Raw", "Std.DTreeMap.Raw.any"⟩,⟨"Std.ExtDTreeMap", "Std.ExtDTreeMap.any"⟩,⟨"Std.TreeMap", "Std.TreeMap.any"⟩,⟨"Std.TreeMap.Raw", "Std.TreeMap.Raw.any"⟩,⟨"Std.ExtTreeMap", "Std.ExtTreeMap.any"⟩,⟨"Std.HashSet", "Std.HashSet.any"⟩,⟨"Std.HashSet.Raw", "Std.HashSet.Raw.any"⟩,⟨"Std.TreeSet", "Std.TreeSet.any"⟩,⟨"Std.TreeSet.Raw", "Std.TreeSet.Raw.any"⟩,⟨"Std.ExtTreeSet", "Std.ExtTreeSet.any"⟩,]⟩,
  ]
  facts := #[
    «01f88623-fa5f-4380-9772-b30f2fec5c94»,
    «f084f852-af71-45b6-8ab3-d251a8144f72»,
    «f4e6fa70-5aed-439d-aaad-5f4ced65bf7b»,
  ]

def restoreState : RestoreStateM Unit := do
  addAssociationTable table
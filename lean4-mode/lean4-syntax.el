;; Copyright (c) 2013, 2014 Microsoft Corporation. All rights reserved.
;; Released under Apache 2.0 license as described in the file LICENSE.
;;
;; Author: Leonardo de Moura
;;         Soonho Kong
;;

(require 'dash)
(require 'rx)

(defconst lean4-keywords1
  '("import" "prelude" "protected" "private" "noncomputable"
    "unsafe" "partial" "renaming" "hiding" "begin" "constant"
    "variable" "variables" "theorem" "example" "abbrev"
    "open" "export" "axiom" "inductive" "with"
    "structure" "universe" "universes" "hide"
    "precedence" "match_syntax" "match" "nomatch" "infix" "infixl" "infixr" "notation" "postfix" "prefix" "instance"
    "end" "this" "using" "using_well_founded" "namespace" "section"
    "attribute" "local" "set_option" "extends" "include" "class"
    "attributes" "raw" "have" "show" "suffices" "by" "in" "at" "do" "let" "for" "unless" "break" "continue"
    "try" "catch" "finally" "where" "rec" "mut" "forall" "fun"
    "exists" "if" "then" "else" "from" "init_quot" "return"
    "mutual" "def" "run_cmd" "declare_syntax_cat" "syntax" "macro_rules" "macro" "scoped" "elab"
    "initialize" "builtin_initialize" "register_builtin_option" "induction" "cases" "generalizing" "unif_hint" "deriving")
  "lean keywords ending with 'word' (not symbol)")
(defconst lean4-keywords1-regexp
  (eval `(rx word-start (or ,@lean4-keywords1) word-end)))
(defconst lean4-constants
  '("#" "@" "!" "$" "->" "‚àº" "‚Üî" "/" "==" "=" ":=" "<->" "/\\" "\\/" "‚àß" "‚à®"
    "‚â†" "<" ">" "‚â§" "‚â•" "¬¨" "<=" ">=" "‚Åª¬π" "‚¨ù" "‚ñ∏" "+" "*" "-" "/" "Œª"
    "‚Üí" "‚àÉ" "‚àÄ" "‚àò" "√ó" "Œ£" "Œ†" "~" "||" "&&" "‚âÉ" "‚â°" "‚âÖ"
    "‚Ñï" "‚Ñ§" "‚Ñö" "‚Ñù" "‚ÑÇ" "ùî∏"
    "‚¨ùe" "‚¨ùi" "‚¨ùo" "‚¨ùop" "‚¨ùpo" "‚¨ùh" "‚¨ùv" "‚¨ùhp" "‚¨ùvp" "‚¨ùph" "‚¨ùpv" "‚¨ùr" "‚óæ" "‚óæo"
    "‚àòn" "‚àòf" "‚àòfi" "‚àònf" "‚àòfn" "‚àòn1f" "‚àò1nf" "‚àòf1n" "‚àòfn1"
    "^c" "‚âÉc" "‚âÖc" "√óc" "√óf" "√ón" "+c" "+f" "+n" "‚Ñï‚Çã‚ÇÇ")
  "lean constants")
(defconst lean4-constants-regexp (regexp-opt lean4-constants))
(defconst lean4-numerals-regexp
  (eval `(rx word-start
             (one-or-more digit) (optional (and "." (zero-or-more digit)))
             word-end)))

(defconst lean4-warnings '("sorry" "exit" "admit") "lean warnings")
(defconst lean4-warnings-regexp
  (eval `(rx word-start (or ,@lean4-warnings) word-end)))
(defconst lean4-debugging '("unreachable" "panic" "assert" "dbgTrace") "lean debugging")
(defconst lean4-debugging-regexp
  (eval `(rx word-start (or ,@lean4-debugging))))


(defconst lean4-syntax-table
  (let ((st (make-syntax-table)))
    ;; Matching parens
    (modify-syntax-entry ?\[ "(]" st)
    (modify-syntax-entry ?\] ")[" st)
    (modify-syntax-entry ?\{ "(}" st)
    (modify-syntax-entry ?\} "){" st)

    ;; comment
    (modify-syntax-entry ?/ ". 14nb" st)
    (modify-syntax-entry ?- ". 123" st)
    (modify-syntax-entry ?\n ">" st)
    (modify-syntax-entry ?¬´ "<" st)
    (modify-syntax-entry ?¬ª ">" st)

    ;; Word constituent
    (--map (modify-syntax-entry it "w" st)
           (list ?a ?b ?c ?d ?e ?f ?g ?h ?i ?j ?k ?l ?m
                 ?n ?o ?p ?q ?r ?s ?t ?u ?v ?w ?x ?y ?z
                 ?A ?B ?C ?D ?E ?F ?G ?H ?I ?J ?K ?L ?M
                 ?N ?O ?P ?Q ?R ?S ?T ?U ?V ?W ?X ?Y ?Z))
    (--map (modify-syntax-entry it "w" st)
           (list ?0 ?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9))
    (--map (modify-syntax-entry it "w" st)
           (list ?Œ± ?Œ≤ ?Œ≥ ?Œ¥ ?Œµ ?Œ∂ ?Œ∑ ?Œ∏ ?Œπ ?Œ∫ ;;?Œª
                 ?Œº ?ŒΩ ?Œæ ?Œø ?œÄ ?œÅ ?œÇ ?œÉ ?œÑ ?œÖ
                 ?œÜ ?œá ?œà ?œâ))
    (--map (modify-syntax-entry it "w" st)
           (list ?œä ?œã ?œå ?œç ?œé ?œè ?œê ?œë ?œí ?œì ?œî ?œï ?œñ
                 ?œó ?œò ?œô ?œö ?œõ ?œú ?œù ?œû ?œü ?œ† ?œ° ?œ¢ ?œ£
                 ?œ§ ?œ• ?œ¶ ?œß ?œ® ?œ© ?œ™ ?œ´ ?œ¨ ?œ≠ ?œÆ ?œØ ?œ∞
                 ?œ± ?œ≤ ?œ≥ ?œ¥ ?œµ ?œ∂ ?œ∑ ?œ∏ ?œπ ?œ∫ ?œª))
    (--map (modify-syntax-entry it "w" st)
           (list ?·ºÄ ?·ºÅ ?·ºÇ ?·ºÉ ?·ºÑ ?·ºÖ ?·ºÜ ?·ºá ?·ºà ?·ºâ ?·ºä ?·ºã ?·ºå
                 ?·ºç ?·ºé ?·ºè ?·ºê ?·ºë ?·ºí ?·ºì ?·ºî ?·ºï ?·ºñ ?·ºó ?·ºò ?·ºô
                 ?·ºö ?·ºõ ?·ºú ?·ºù ?·ºû ?·ºü ?·º† ?·º° ?·º¢ ?·º£ ?·º§ ?·º•
                 ?·º¶ ?·ºß ?·º® ?·º© ?·º™ ?·º´ ?·º¨ ?·º≠ ?·ºÆ ?·ºØ ?·º∞ ?·º±
                 ?·º≤ ?·º≥ ?·º¥ ?·ºµ ?·º∂ ?·º∑ ?·º∏ ?·ºπ ?·º∫ ?·ºª ?·ºº ?·ºΩ ?·ºæ ?·ºø
                 ?·ΩÄ ?·ΩÅ ?·ΩÇ ?·ΩÉ ?·ΩÑ ?·ΩÖ ?·ΩÜ ?·Ωá ?·Ωà ?·Ωâ ?·Ωä ?·Ωã
                 ?·Ωå ?·Ωç ?·Ωé ?·Ωè ?·Ωê ?·Ωë ?·Ωí ?·Ωì ?·Ωî ?·Ωï ?·Ωñ ?·Ωó
                 ?·Ωò ?·Ωô ?·Ωö ?·Ωõ ?·Ωú ?·Ωù ?·Ωû ?·Ωü ?·Ω† ?·Ω° ?·Ω¢
                 ?·Ω£ ?·Ω§ ?·Ω• ?·Ω¶ ?·Ωß ?·Ω® ?·Ω© ?·Ω™ ?·Ω´ ?·Ω¨ ?·Ω≠ ?·ΩÆ
                 ?·ΩØ ?·Ω∞ ?·Ω± ?·Ω≤ ?·Ω≥ ?·Ω¥ ?·Ωµ ?·Ω∂ ?·Ω∑ ?·Ω∏ ?·Ωπ ?·Ω∫ ?·Ωª ?·Ωº
                 ?·ΩΩ ?·Ωæ ?·Ωø ?·æÄ ?·æÅ ?·æÇ ?·æÉ ?·æÑ ?·æÖ ?·æÜ ?·æá ?·æà
                 ?·æâ ?·æä ?·æã ?·æå ?·æç ?·æé ?·æè ?·æê ?·æë ?·æí ?·æì ?·æî
                 ?·æï ?·æñ ?·æó ?·æò ?·æô ?·æö ?·æõ ?·æú ?·æù ?·æû ?·æü ?·æ† ?·æ° ?·æ¢
                 ?·æ£ ?·æ§ ?·æ• ?·æ¶ ?·æß ?·æ® ?·æ© ?·æ™ ?·æ´ ?·æ¨ ?·æ≠ ?·æÆ ?·æØ ?·æ∞
                 ?·æ± ?·æ≤ ?·æ≥ ?·æ¥ ?·æµ ?·æ∂ ?·æ∑ ?·æ∏ ?·æπ ?·æ∫ ?·æª ?·æº ?·æΩ
                 ?·ææ ?·æø ?·øÄ ?·øÅ ?·øÇ ?·øÉ ?·øÑ ?·øÖ ?·øÜ ?·øá ?·øà ?·øâ ?·øä
                 ?·øã ?·øå ?·øç ?·øé ?·øè ?·øê ?·øë ?·øí ?·øì ?·øî ?·øï ?·øñ ?·øó
                 ?·øò ?·øô ?·øö ?·øõ ?·øú ?·øù ?·øû ?·øü ?·ø† ?·ø° ?·ø¢ ?·ø£ ?·ø§ ?·ø•
                 ?·ø¶ ?·øß ?·ø® ?·ø© ?·ø™ ?·ø´ ?·ø¨ ?·ø≠ ?·øÆ ?·øØ ?·ø∞ ?·ø± ?·ø≤ ?·ø≥
                 ?·ø¥ ?·øµ ?·ø∂ ?·ø∑ ?·ø∏ ?·øπ ?·ø∫ ?·øª ?·øº ?·øΩ ?·øæ))
    (--map (modify-syntax-entry it "w" st)
           (list ?‚ÑÄ ?‚ÑÅ ?‚ÑÇ ?‚ÑÉ ?‚ÑÑ ?‚ÑÖ ?‚ÑÜ ?‚Ñá ?‚Ñà ?‚Ñâ ?‚Ñä ?‚Ñã ?‚Ñå ?‚Ñç ?‚Ñé
                 ?‚Ñè ?‚Ñê ?‚Ñë ?‚Ñí ?‚Ñì ?‚Ñî ?‚Ñï ?‚Ññ ?‚Ñó ?‚Ñò ?‚Ñô ?‚Ñö ?‚Ñõ ?‚Ñú ?‚Ñù
                 ?‚Ñû ?‚Ñü ?‚Ñ† ?‚Ñ° ?‚Ñ¢ ?‚Ñ£ ?‚Ñ§ ?‚Ñ• ?‚Ñ¶ ?‚Ñß ?‚Ñ® ?‚Ñ© ?‚Ñ™ ?‚Ñ´ ?‚Ñ¨
                 ?‚Ñ≠ ?‚ÑÆ ?‚ÑØ ?‚Ñ∞ ?‚Ñ± ?‚Ñ≤ ?‚Ñ≥ ?‚Ñ¥ ?‚Ñµ ?‚Ñ∂ ?‚Ñ∑ ?‚Ñ∏ ?‚Ñπ ?‚Ñ∫ ?‚Ñª
                 ?‚Ñº ?‚ÑΩ ?‚Ñæ ?‚Ñø ?‚ÖÄ ?‚ÖÅ ?‚ÖÇ ?‚ÖÉ ?‚ÖÑ ?‚ÖÖ ?‚ÖÜ ?‚Öá ?‚Öà ?‚Öâ ?‚Öä
                 ?‚Öã ?‚Öå ?‚Öç ?‚Öé ?‚Öè))
    (--map (modify-syntax-entry it "w" st)
           (list ?‚ÇÅ ?‚ÇÇ ?‚ÇÉ ?‚ÇÑ ?‚ÇÖ ?‚ÇÜ ?‚Çá ?‚Çà ?‚Çâ ?‚ÇÄ
                 ?‚Çê ?‚Çë ?‚Çí ?‚Çì ?‚Çî ?‚Çï ?‚Çñ ?‚Çó ?‚Çò ?‚Çô ?‚Çö ?‚Çõ ?‚Çú
                 ?' ?_ ?! ??))

    ;; Lean operator chars
    (mapc #'(lambda (ch) (modify-syntax-entry ch "." st))
          "#$%&*+<=>@^|~:")

    ;; Whitespace is whitespace
    (modify-syntax-entry ?\  " " st)
    (modify-syntax-entry ?\t " " st)

    ;; Strings
    (modify-syntax-entry ?\" "\"" st)
    (modify-syntax-entry ?\\ "/" st)

    st))

(defconst lean4-font-lock-defaults
  `((;; attributes
     (,(rx word-start "attribute" word-end (zero-or-more whitespace) (group (one-or-more "[" (zero-or-more (not (any "]"))) "]" (zero-or-more whitespace))))
      (1 'font-lock-preprocessor-face))
     (,(rx (group "@[" (zero-or-more (not (any "]"))) "]"))
      (1 'font-lock-preprocessor-face))
     (,(rx (group "#" (or "eval" "print" "reduce" "help" "check" "lang" "check_failure" "synth")))
      (1 'font-lock-keyword-face))
     ;; mutual definitions "names"
     (,(rx word-start
           "mutual"
           word-end
           (zero-or-more whitespace)
           word-start
           (or "inductive" "definition" "def")
           word-end
           (group (zero-or-more (not (any " \t\n\r{([,"))) (zero-or-more (zero-or-more whitespace) "," (zero-or-more whitespace) (not (any " \t\n\r{([,")))))
      (1 'font-lock-function-name-face))
     ;; declarations
     (,(rx word-start
           (group (or "inductive" (group "class" (zero-or-more whitespace) "inductive") "instance" "structure" "class" "theorem" "axiom" "lemma" "definition" "def" "constant"))
           word-end (zero-or-more whitespace)
           (group (zero-or-more "{" (zero-or-more (not (any "}"))) "}" (zero-or-more whitespace)))
           (zero-or-more whitespace)
           (group (zero-or-more (not (any " \t\n\r{([")))))
      (4 'font-lock-function-name-face))
     ;; Constants which have a keyword as subterm
     (,(rx (or "‚àòif")) . 'font-lock-constant-face)
     ;; Keywords
     ("\\(set_option\\)[ \t]*\\([^ \t\n]*\\)" (2 'font-lock-constant-face))
     (,lean4-keywords1-regexp . 'font-lock-keyword-face)
     (,(rx word-start (group "example") ".") (1 'font-lock-keyword-face))
     (,(rx (or "‚àé")) . 'font-lock-keyword-face)
     ;; Types
     (,(rx word-start (or "Prop" "Type" "Type*" "Sort" "Sort*") symbol-end) . 'font-lock-type-face)
     (,(rx word-start (group (or "Prop" "Type" "Sort")) ".") (1 'font-lock-type-face))
     ;; String
     ("\"[^\"]*\"" . 'font-lock-string-face)
     ;; ;; Constants
     (,lean4-constants-regexp . 'font-lock-constant-face)
     (,lean4-numerals-regexp . 'font-lock-constant-face)
     ;; place holder
     (,(rx symbol-start "_" symbol-end) . 'font-lock-preprocessor-face)
     ;; warnings
     (,lean4-warnings-regexp . 'font-lock-warning-face)
     (,lean4-debugging-regexp . 'font-lock-warning-face)
     ;; escaped identifiers
     (,(rx (and (group "¬´") (group (one-or-more (not (any "¬ª")))) (group "¬ª")))
      (1 font-lock-comment-face t)
      (2 nil t)
      (3 font-lock-comment-face t))
     )))

;; Syntax Highlighting for Lean Info Mode
(defconst lean4-info-font-lock-defaults
  (let ((new-entries
         `(;; Please add more after this:
           (,(rx (group (+ symbol-start (+ (or word (char ?‚ÇÅ ?‚ÇÇ ?‚ÇÉ ?‚ÇÑ ?‚ÇÖ ?‚ÇÜ ?‚Çá ?‚Çà ?‚Çâ ?‚ÇÄ))) symbol-end (* white))) ":")
            (1 'font-lock-variable-name-face))
           (,(rx white ":" white)
            . 'font-lock-keyword-face)
           (,(rx "‚ä¢" white)
            . 'font-lock-keyword-face)
           (,(rx "[" (group "stale") "]")
            (1 'font-lock-warning-face))
           (,(rx line-start "No Goal" line-end)
            . 'font-lock-constant-face)))
        (inherited-entries (car lean4-font-lock-defaults)))
    `(,(-concat new-entries inherited-entries))))

(provide 'lean4-syntax)

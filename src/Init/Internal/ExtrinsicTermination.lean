/-
Copyright (c) 2025 Lean FRO, LLC. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Paul Reichert
-/
module

prelude
import Init.Classical
public import Init.NotationExtra

set_option doc.verso true

/-!
# Fixpoints with extrinsic proofs of termination

This module provides a fixpoint combinator that does not require an immediate *intrinsic*
termination proof, but lends itself to formal verification given a deferred *extrinsic* termination
proof.

This fixpoint combinator can be seen as a compromise between using a `partial` function, which is
fully opaque, and using well-founded recursion, which requires an intrinsic termination proof.

The soundness (in a wide sense, including compatibility of kernel and compiler semantics) relies on
the same assumption as the one WF preprocessing is built upon: When two fixpoint-defining
functionals are propositionally equal, then the observable runtime behavior of their fixpoints is
identical.
-/

variable {α : Sort _} {β : α → Sort _} {C : α → Sort _} {C₂ : (a : α) → β a → Sort _}

namespace Std.Internal

@[specialize]
public partial def opaqueFix [∀ x, Nonempty (C x)] (F : (x : α) → ((y : α) → C y) → C x) (x : α) : C x :=
  F x (opaqueFix F)

@[expose]
public def TerminatesTotally (F : (x : α) → ((y : α) → C y) → C x) : Prop :=
  ∃ (r : α → α → Prop) (F' : (x : α) → ((y : α) → r y x → C y) → C x), WellFounded r ∧ ∀ x G, F x G = F' x (fun x _ => G x)

/-
SAFE assuming that the code generated by iteration over `F` is compatible
with the kernel semantics of iteration over `F' : (x : α) → ((y : α) → r y x → C y) → C x`
for all `F'` as in `TerminatesTotally`.
-/
@[implemented_by opaqueFix]
public def extrinsicFix [∀ x, Nonempty (C x)] (F : (x : α) → ((y : α) → C y) → C x) (x : α) : C x :=
  open scoped Classical in
  if h : TerminatesTotally F then
    let F' := h.choose_spec.choose
    let h := h.choose_spec.choose_spec
    h.1.fix F' x
  else
    opaqueFix F x

public def extrinsicFix_eq [∀ x, Nonempty (C x)] {F : (x : α) → ((y : α) → C y) → C x}
    (h : TerminatesTotally F) {x : α} :
    extrinsicFix F x = F x (extrinsicFix F) := by
  simp only [extrinsicFix, dif_pos h]
  rw [WellFounded.fix_eq, show (extrinsicFix F) = (fun y => extrinsicFix F y) by rfl]
  simp only [extrinsicFix, dif_pos h, h.choose_spec.choose_spec.2]

@[specialize]
public partial def opaqueFix₂ [∀ a b, Nonempty (C₂ a b)]
    (F : (a : α) → (b : β a) → ((a' : α) → (b' : β a') → C₂ a' b') → C₂ a b) (a : α) (b : β a) :
    C₂ a b :=
  F a b (opaqueFix₂ F)

@[expose]
public def TerminatesTotally₂
    (F : (a : α) → (b : β a) → ((a' : α) → (b' : β a') → C₂ a' b') → C₂ a b) : Prop :=
  ∃ (r : PSigma β → PSigma β → Prop)
    (F' : (a : α) → (b : β a) → ((a' : α) → (b' : β a') → r ⟨a', b'⟩ ⟨a, b⟩ → C₂ a' b') → C₂ a b),
    WellFounded r ∧ ∀ a b G, F a b G = F' a b (fun a' b' _ => G a' b')

/-
SAFE assuming that the code generated by iteration over `F` is compatible
with the kernel semantics of iteration over
`F' : (a : α) → (b : β a) → ((a' : α) → (b' : β a') → C₂ a' b') → C₂ a b`
for all `F'` as in `TerminatesTotally₂`.
-/
@[implemented_by opaqueFix₂]
public def extrinsicFix₂ [∀ a b, Nonempty (C₂ a b)]
    (F : (a : α) → (b : β a) → ((a' : α) → (b' : β a') → C₂ a' b') → C₂ a b) (a : α) (b : β a) :
    C₂ a b :=
  let F' (x : PSigma β) (G : (y : PSigma β) → C₂ y.1 y.2) : C₂ x.1 x.2 :=
    F x.1 x.2 (fun a b => G ⟨a, b⟩)
  extrinsicFix (C := fun x : PSigma β => C₂ x.1 x.2) F' ⟨a, b⟩

public def extrinsicFix₂_eq [∀ a b, Nonempty (C₂ a b)]
    {F : (a : α) → (b : β a) → ((a' : α) → (b' : β a') → C₂ a' b') → C₂ a b}
    (h : TerminatesTotally₂ F) {a : α} {b : β a} :
    extrinsicFix₂ F a b = F a b (extrinsicFix₂ F) := by
  rw [extrinsicFix₂, extrinsicFix_eq]
  · rfl
  · let r := h.choose
    let F' := h.choose_spec.choose
    let h := h.choose_spec.choose_spec
    refine ⟨r, ?_, ?_, ?_⟩
    · exact fun x G => F' x.1 x.2 (fun a' b' rab => G ⟨a', b'⟩ rab)
    · exact h.1
    · intro x G
      apply h.2

end Std.Internal

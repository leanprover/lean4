/-
Copyright (c) 2024 Lean FRO, LLC. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sofia Rodrigues
-/
prelude
import Std.Time
import Std.Internal.UV.Signal
import Std.Internal.Async.Select

namespace Std
namespace Internal
namespace IO
namespace Async

/--
Unix style signals for Unix and Windows. SIGKILL and SIGSTOP are missing because they cannot be caught.
SIGPIPE is not present because it's usually handled by the runtime.
-/
inductive Signal

  /--
  Hangup detected on controlling terminal or death of controlling process. SIGHUP is not
  generated when terminal raw mode is enabled.

  On Windows:
  * SIGHUP is generated when the user closes the console window. The program is given ~10 seconds to
    cleanup before Windows unconditionally terminates it.
  -/
  | sighup

  /--
  Interrupt program.

  * Normally delivered when the user presses CTRL+C. Not generated when terminal raw mode is enabled (like Unix).
  -/
  | sigint

  /--
  Quit program.
  -/
  | sigquit

  /--
  Trace/breakpoint trap.
  -/
  | sigtrap

  /--
  Abort signal.

  Notes:
  - SIGABRT will not be caught by libuv if generated by abort(), e.g. via assert().
  - On Windows, watchers can be created for SIGABRT, but they never receive the signal.
  -/
  | sigabrt

  /--
  Emulate instruction executed
  -/
  | sigemt

  /--
  Bad system call.
  -/
  | sigsys

  /--
  Real-time timer expired.
  -/
  | sigalrm

  /--
  Termination signal.

  Notes:
  - On Windows, watchers can be created for SIGTERM, but they never receive the signal.
  -/
  | sigterm

  /--
  Urgent condition on socket.
  -/
  | sigurg

  /--
  Stop typed at tty.
  -/
  | sigtstp

  /--
  Continue after stop.
  -/
  | sigcont

  /--
  Child status has changed.
  -/
  | sigchld

  /--
  Background read attempted from control terminal.
  -/
  | sigttin

  /--
  Background write attempted to control terminal
  -/
  | sigttou

  /--
  I/O now possible.
  -/
  | sigio

  /--
  CPU time limit exceeded.
  -/
  | sigxcpu

  /--
  File size limit exceeded.
  -/
  | sigxfsz

  /--
  Virtual alarm clock.
  -/
  | sigvtalrm

  /--
  Profiling timer expired.
  -/
  | sigprof

  /--
  Window size change.

  Notes:
  - SIGWINCH is raised whenever libuv detects the console has been resized.
  - Under console emulators, or on 32-bit libuv apps on 64-bit systems, SIGWINCH is emulated.
  - In these cases, signals may not be delivered timely.
  -/
  | sigwinch

  /--
  Status request from keyboard.
  -/
  | siginfo

  /--
  User-defined signal 1.
  -/
  | sigusr1

  /--
  User-defined signal 2.
  -/
  | sigusr2

deriving Repr, DecidableEq

namespace Signal

/--
Converts a `Signal` to its corresponding `Int32` value as defined in the libc `signal.h`.
-/
def toInt32 : Signal → Int32
  | .sighup => 1
  | .sigint => 2
  | .sigquit => 3
  | .sigtrap => 5
  | .sigabrt => 6
  | .sigemt => 7
  | .sigsys => 12
  | .sigalrm => 14
  | .sigterm => 15
  | .sigurg => 16
  | .sigtstp => 18
  | .sigcont => 19
  | .sigchld => 20
  | .sigttin => 21
  | .sigttou => 22
  | .sigio => 23
  | .sigxcpu => 24
  | .sigxfsz => 25
  | .sigvtalrm => 26
  | .sigprof => 27
  | .sigwinch => 28
  | .siginfo => 29
  | .sigusr1 => 30
  | .sigusr2 => 31

/--
Waits for a `Signal` and returns an async task that completes when the signal occurs.
-/
@[inline]
def wait (s : Signal) : IO (AsyncTask Unit) := do
  let promise ← UV.Signal.waitFor s.toInt32
  return .ofPromise promise

end Signal
end Async
end IO
end Internal
end Std

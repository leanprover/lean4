Array.insertionSort.swapLoop._eq_1.{u_1} {α : Type u_1} (lt : α → α → Bool) (a : Array α) (h : 0 < Array.size a) :
  Array.insertionSort.swapLoop lt a 0 h = a
Array.insertionSort.swapLoop._eq_2.{u_1} {α : Type u_1} (lt : α → α → Bool) (a : Array α) (j' : Nat)
  (h : Nat.succ j' < Array.size a) :
  Array.insertionSort.swapLoop lt a (Nat.succ j') h =
    let_fun h' := (⋯ : j' < Array.size a);
    if lt a[Nat.succ j'] a[j'] = true then
      Array.insertionSort.swapLoop lt (Array.swap a { val := Nat.succ j', isLt := h } { val := j', isLt := h' }) j'
        (⋯ : j' < Array.size (Array.swap a { val := Nat.succ j', isLt := h } { val := j', isLt := h' }))
    else a

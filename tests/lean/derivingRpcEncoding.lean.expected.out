instTypeNameFooRef : TypeName FooRef
Except.ok {"p": "0"}
instRpcEncodableBar : RpcEncodable Bar
Except.ok {"fooRef": {"p": "0"}, "fooJson": {"s": ""}}
instRpcEncodableBarTrans : RpcEncodable BarTrans
Except.ok {"bar": {"fooRef": {"p": "0"}, "fooJson": {"s": ""}}}
instRpcEncodableBaz : RpcEncodable Baz
Except.ok {"arr": []}
instRpcEncodableFooGeneric {α : Type} [inst✝ : RpcEncodable α] : RpcEncodable (FooGeneric α)
Except.ok {"a": 0}
Except.ok {"b": 42, "a": 3}
instRpcEncodableBazInductive : RpcEncodable BazInductive
Except.ok {"baz":
 {"arr":
  [{"fooRef": {"p": "0"}, "fooJson": {"s": ""}},
   {"fooRef": {"p": "1"}, "fooJson": {"s": ""}}]}}
instRpcEncodableFooInductive {α : Type} [inst✝ : RpcEncodable α] : RpcEncodable (FooInductive α)
Except.ok {"a": [{"baz": {"arr": []}}, {"p": "0"}]}
Except.ok {"b": {"n": 42, "m": 0, "a": {"baz": {"arr": []}}}}
Except.ok {"a": [{"baz": {"arr": []}}, [{"a": [{"baz": {"arr": []}}, []]}]]}
instRpcEncodableFooParam {n : Nat} : RpcEncodable (FooParam n)
Except.ok {"a": 42}
instRpcEncodableUnused {α : Type} : RpcEncodable (Unused α)
Except.ok "a"
instRpcEncodableUnusedStruct {α : Type} : RpcEncodable (UnusedStruct α)
Except.ok {}
Except.error "no inductive constructor matched"

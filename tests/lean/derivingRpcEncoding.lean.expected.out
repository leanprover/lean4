instRpcEncodingWithRpcRefFooRefRpcRef : RpcEncoding (WithRpcRef FooRef) Lsp.RpcRef
ok: {"p": "0"}
protected inductive Bar.RpcEncodingPacket : Type
number of parameters: 0
constructors:
Bar.RpcEncodingPacket.mk : Lsp.RpcRef → FooJson → Bar.RpcEncodingPacket
instRpcEncodingBarRpcEncodingPacket : RpcEncoding Bar Bar.RpcEncodingPacket
ok: {"fooRef": {"p": "0"}, "fooJson": {"s": ""}}
instRpcEncodingBarTransRpcEncodingPacket : RpcEncoding BarTrans BarTrans.RpcEncodingPacket
ok: {"bar": {"fooRef": {"p": "0"}, "fooJson": {"s": ""}}}
instRpcEncodingBazRpcEncodingPacket : RpcEncoding Baz Baz.RpcEncodingPacket
ok: {"arr": []}
protected inductive FooGeneric.RpcEncodingPacket : Type → Type
number of parameters: 1
constructors:
FooGeneric.RpcEncodingPacket.mk : {αPacket : Type} → αPacket → Option αPacket → FooGeneric.RpcEncodingPacket αPacket
instRpcEncodingFooGenericRpcEncodingPacket : (α αPacket : Type) →
  [inst : RpcEncoding α αPacket] → RpcEncoding (FooGeneric α) (FooGeneric.RpcEncodingPacket αPacket)
ok: {"a": 0}
ok: {"b": 42, "a": 3}
instRpcEncodingBazInductiveRpcEncodingPacket : RpcEncoding BazInductive BazInductive.RpcEncodingPacket
ok: {"baz":
 [{"fooRef": {"p": "0"}, "fooJson": {"s": ""}},
  {"fooRef": {"p": "1"}, "fooJson": {"s": ""}}]}
inductive FooInductive.RpcEncodingPacket : Type → Type
number of parameters: 1
constructors:
FooInductive.RpcEncodingPacket.a : {αPacket : Type} → αPacket → Lsp.RpcRef → FooInductive.RpcEncodingPacket αPacket
FooInductive.RpcEncodingPacket.b : {αPacket : Type} → Nat → αPacket → Nat → FooInductive.RpcEncodingPacket αPacket
instRpcEncodingFooInductiveRpcEncodingPacket : (α αPacket : Type) →
  [inst : RpcEncoding α αPacket] → RpcEncoding (FooInductive α) (FooInductive.RpcEncodingPacket αPacket)
ok: {"a": [{"baz": []}, {"p": "0"}]}
ok: {"b": [42, {"baz": []}, 0]}
inductive FooNested.RpcEncodingPacket : Type → Type
number of parameters: 1
constructors:
FooNested.RpcEncodingPacket.a : {αPacket : Type} →
  αPacket → Array (FooNested.RpcEncodingPacket αPacket) → FooNested.RpcEncodingPacket αPacket
@FooNested.RpcEncodingPacket.a : {αPacket : Type} →
  αPacket → Array (FooNested.RpcEncodingPacket αPacket) → FooNested.RpcEncodingPacket αPacket
ok: {"a": [{"baz": []}, [{"a": [{"baz": []}, []]}]]}
instRpcEncodingFooParamRpcEncodingPacket : (n : Nat) → RpcEncoding (FooParam n) (FooParam.RpcEncodingPacket n)
ok: {"a": 42}

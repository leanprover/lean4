[Elab.info] command @ ⟨13, 0⟩-⟨15, 6⟩ @ Lean.Elab.Command.elabDeclaration
  Nat : Type @ ⟨13, 11⟩-⟨13, 14⟩ @ Lean.Elab.Term.elabIdent
    [.] `Nat : some Sort.{?_uniq.405} @ ⟨13, 11⟩-⟨13, 14⟩
    Nat : Type @ ⟨13, 11⟩-⟨13, 14⟩
  x : Nat @ ⟨13, 7⟩-⟨13, 8⟩
  Nat × Nat : Type @ ⟨13, 18⟩-⟨13, 27⟩ @ myMacro._@.Init.Notation._hyg.2315
    Macro expansion
    Nat × Nat
    ===>
    Prod✝ Nat Nat
      Nat × Nat : Type @ ⟨13, 18⟩†-⟨13, 27⟩ @ Lean.Elab.Term.elabApp
        Prod : Type → Type → Type @ ⟨13, 18⟩†-⟨13, 27⟩†
        Nat : Type @ ⟨13, 18⟩-⟨13, 21⟩ @ Lean.Elab.Term.elabIdent
          [.] `Nat : some Type.{?_uniq.409} @ ⟨13, 18⟩-⟨13, 21⟩
          Nat : Type @ ⟨13, 18⟩-⟨13, 21⟩
        Nat : Type @ ⟨13, 24⟩-⟨13, 27⟩ @ Lean.Elab.Term.elabIdent
          [.] `Nat : some Type.{?_uniq.408} @ ⟨13, 24⟩-⟨13, 27⟩
          Nat : Type @ ⟨13, 24⟩-⟨13, 27⟩
  let y := (x, x);
  id y : Nat × Nat @ ⟨14, 2⟩-⟨15, 6⟩ @ Lean.Elab.Term.elabLetDecl
    Nat × Nat : Type @ ⟨14, 6⟩†-⟨14, 7⟩† @ Lean.Elab.Term.elabHole
    (x, x) : Nat × Nat @ ⟨14, 11⟩-⟨14, 17⟩ @ Lean.Elab.Term.elabAnonymousCtor
      Macro expansion
      ⟨x, x⟩
      ===>
      Prod.mk✝ x x
        (x, x) : Nat × Nat @ ⟨14, 11⟩†-⟨14, 16⟩ @ Lean.Elab.Term.elabApp
          Prod.mk : {α β : Type} → α → β → α × β @ ⟨14, 11⟩†-⟨14, 17⟩†
          x : Nat @ ⟨14, 12⟩-⟨14, 13⟩ @ Lean.Elab.Term.elabIdent
            x : Nat @ ⟨14, 12⟩-⟨14, 13⟩
          x : Nat @ ⟨14, 15⟩-⟨14, 16⟩ @ Lean.Elab.Term.elabIdent
            x : Nat @ ⟨14, 15⟩-⟨14, 16⟩
    y : Nat × Nat @ ⟨14, 6⟩-⟨14, 7⟩
    id y : Nat × Nat @ ⟨15, 2⟩-⟨15, 6⟩ @ Lean.Elab.Term.elabApp
      [.] `id : some Prod.{0 0} Nat Nat @ ⟨15, 2⟩-⟨15, 4⟩
      id : {α : Type} → α → α @ ⟨15, 2⟩-⟨15, 4⟩
      y : Nat × Nat @ ⟨15, 5⟩-⟨15, 6⟩ @ Lean.Elab.Term.elabIdent
        y : Nat × Nat @ ⟨15, 5⟩-⟨15, 6⟩
[Elab.info] command @ ⟨17, 0⟩-⟨19, 8⟩ @ Lean.Elab.Command.elabDeclaration
  ∀ (x y : Nat), Bool → x + 0 = x : Prop @ ⟨17, 8⟩-⟨17, 44⟩ @ Lean.Elab.Term.elabDepArrow
    Nat : Type @ ⟨17, 15⟩-⟨17, 18⟩ @ Lean.Elab.Term.elabIdent
      [.] `Nat : some Sort.{?_uniq.436} @ ⟨17, 15⟩-⟨17, 18⟩
      Nat : Type @ ⟨17, 15⟩-⟨17, 18⟩
    x : Nat @ ⟨17, 9⟩-⟨17, 10⟩
    Nat : Type @ ⟨17, 15⟩-⟨17, 18⟩ @ Lean.Elab.Term.elabIdent
      [.] `Nat : some Sort.{?_uniq.438} @ ⟨17, 15⟩-⟨17, 18⟩
      Nat : Type @ ⟨17, 15⟩-⟨17, 18⟩
    y : Nat @ ⟨17, 11⟩-⟨17, 12⟩
    Bool → x + 0 = x : Prop @ ⟨17, 22⟩-⟨17, 44⟩ @ Lean.Elab.Term.elabDepArrow
      Bool : Type @ ⟨17, 27⟩-⟨17, 31⟩ @ Lean.Elab.Term.elabIdent
        [.] `Bool : some Sort.{?_uniq.441} @ ⟨17, 27⟩-⟨17, 31⟩
        Bool : Type @ ⟨17, 27⟩-⟨17, 31⟩
      b : Bool @ ⟨17, 23⟩-⟨17, 24⟩
      x + 0 = x : Prop @ ⟨17, 35⟩-⟨17, 44⟩ @ myMacro._@.Init.Notation._hyg.9093
        Macro expansion
        x + 0 = x
        ===>
        binrel% Eq✝ (x + 0)x
          x + 0 = x : Prop @ ⟨17, 35⟩†-⟨17, 44⟩ @ Lean.Elab.Term.elabBinRel
            x + 0 : Nat @ ⟨17, 35⟩-⟨17, 40⟩ @ myMacro._@.Init.Notation._hyg.6125
              Macro expansion
              x + 0
              ===>
              binop% HAdd.hAdd✝ x 0
                x + 0 : Nat @ ⟨17, 35⟩†-⟨17, 40⟩ @ Lean.Elab.Term.BinOp.elabBinOp
                  x : Nat @ ⟨17, 35⟩-⟨17, 36⟩ @ Lean.Elab.Term.elabIdent
                    x : Nat @ ⟨17, 35⟩-⟨17, 36⟩
                  0 : Nat @ ⟨17, 39⟩-⟨17, 40⟩ @ Lean.Elab.Term.elabNumLit
            x : Nat @ ⟨17, 43⟩-⟨17, 44⟩ @ Lean.Elab.Term.elabIdent
              x : Nat @ ⟨17, 43⟩-⟨17, 44⟩
  fun x y b =>
    of_eq_true
      (Eq.trans (congrFun (congrArg Eq (Nat.add_zero x)) x)
        (eq_self x)) : ∀ (x y : Nat), Bool → x + 0 = x @ ⟨18, 2⟩-⟨19, 8⟩ @ Lean.Elab.Term.elabFun
    Nat : Type @ ⟨18, 6⟩†-⟨18, 7⟩† @ Lean.Elab.Term.elabHole
    x : Nat @ ⟨18, 6⟩-⟨18, 7⟩
    Nat : Type @ ⟨18, 8⟩†-⟨18, 9⟩† @ Lean.Elab.Term.elabHole
    y : Nat @ ⟨18, 8⟩-⟨18, 9⟩
    Bool : Type @ ⟨18, 10⟩†-⟨18, 11⟩† @ Lean.Elab.Term.elabHole
    b : Bool @ ⟨18, 10⟩-⟨18, 11⟩
    Tactic @ ⟨18, 15⟩-⟨19, 8⟩
    (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] [] []) [])])))
    before 
    x y : Nat
    b : Bool
    ⊢ x + 0 = x
    after no goals
      Tactic @ ⟨19, 4⟩-⟨19, 8⟩ @ Lean.Elab.Tactic.evalTacticSeq
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] [] []) [])]))
      before 
      x y : Nat
      b : Bool
      ⊢ x + 0 = x
      after no goals
        Tactic @ ⟨19, 4⟩-⟨19, 8⟩ @ Lean.Elab.Tactic.evalTacticSeq1Indented
        (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] [] []) [])])
        before 
        x y : Nat
        b : Bool
        ⊢ x + 0 = x
        after no goals
          Tactic @ ⟨19, 4⟩-⟨19, 8⟩ @ Lean.Elab.Tactic.evalSimp
          (Tactic.simp "simp" [] [] [] [] [])
          before 
          x y : Nat
          b : Bool
          ⊢ x + 0 = x
          after no goals
[Elab.info] command @ ⟨21, 0⟩-⟨25, 10⟩ @ Lean.Elab.Command.elabDeclaration
  Nat → Nat → Bool → Nat : Type @ ⟨21, 9⟩-⟨21, 39⟩ @ Lean.Elab.Term.elabDepArrow
    Nat : Type @ ⟨21, 16⟩-⟨21, 19⟩ @ Lean.Elab.Term.elabIdent
      [.] `Nat : some Sort.{?_uniq.550} @ ⟨21, 16⟩-⟨21, 19⟩
      Nat : Type @ ⟨21, 16⟩-⟨21, 19⟩
    x : Nat @ ⟨21, 10⟩-⟨21, 11⟩
    Nat : Type @ ⟨21, 16⟩-⟨21, 19⟩ @ Lean.Elab.Term.elabIdent
      [.] `Nat : some Sort.{?_uniq.552} @ ⟨21, 16⟩-⟨21, 19⟩
      Nat : Type @ ⟨21, 16⟩-⟨21, 19⟩
    y : Nat @ ⟨21, 12⟩-⟨21, 13⟩
    Bool → Nat : Type @ ⟨21, 23⟩-⟨21, 39⟩ @ Lean.Elab.Term.elabDepArrow
      Bool : Type @ ⟨21, 28⟩-⟨21, 32⟩ @ Lean.Elab.Term.elabIdent
        [.] `Bool : some Sort.{?_uniq.555} @ ⟨21, 28⟩-⟨21, 32⟩
        Bool : Type @ ⟨21, 28⟩-⟨21, 32⟩
      b : Bool @ ⟨21, 24⟩-⟨21, 25⟩
      Nat : Type @ ⟨21, 36⟩-⟨21, 39⟩ @ Lean.Elab.Term.elabIdent
        [.] `Nat : some Sort.{?_uniq.557} @ ⟨21, 36⟩-⟨21, 39⟩
        Nat : Type @ ⟨21, 36⟩-⟨21, 39⟩
  fun x y b =>
    let x := (x + y, x - y);
    match x with 
    | (z, w) =>
      let z1 := z + w;
      z + z1 : Nat → Nat → Bool → Nat @ ⟨22, 2⟩-⟨25, 10⟩ @ Lean.Elab.Term.elabFun
    Nat : Type @ ⟨22, 6⟩†-⟨22, 7⟩† @ Lean.Elab.Term.elabHole
    x : Nat @ ⟨22, 6⟩-⟨22, 7⟩
    Nat : Type @ ⟨22, 8⟩†-⟨22, 9⟩† @ Lean.Elab.Term.elabHole
    y : Nat @ ⟨22, 8⟩-⟨22, 9⟩
    Bool : Type @ ⟨22, 10⟩†-⟨22, 11⟩† @ Lean.Elab.Term.elabHole
    b : Bool @ ⟨22, 10⟩-⟨22, 11⟩
    let x := (x + y, x - y);
    match x with 
    | (z, w) =>
      let z1 := z + w;
      z + z1 : Nat @ ⟨23, 4⟩-⟨25, 10⟩ @ Lean.Elab.Term.elabLetDecl
      Macro expansion
      let (z, w) := (x + y, x - y)
      let z1 := z + w 
      z + z1
      ===>
      let x✝ : _ := (x + y, x - y);
      match x✝ with 
      | (z, w) =>
        let z1 := z + w 
        z + z1
        let x := (x + y, x - y);
        match x with 
        | (z, w) =>
          let z1 := z + w;
          z + z1 : Nat @ ⟨23, 4⟩†-⟨25, 10⟩ @ Lean.Elab.Term.elabLetDecl
          Nat × Nat : Type @ ⟨23, 8⟩†-⟨23, 14⟩† @ Lean.Elab.Term.elabHole
          (x + y, x - y) : Nat × Nat @ ⟨23, 18⟩-⟨23, 32⟩ @ Lean.Elab.Term.expandParen
            Macro expansion
            (x + y, x - y)
            ===>
            Prod.mk✝ (x + y) (x - y)
              (x + y, x - y) : Nat × Nat @ ⟨23, 18⟩†-⟨23, 31⟩ @ Lean.Elab.Term.elabApp
                Prod.mk : {α β : Type} → α → β → α × β @ ⟨23, 18⟩†-⟨23, 32⟩†
                x + y : Nat @ ⟨23, 19⟩-⟨23, 24⟩ @ myMacro._@.Init.Notation._hyg.6125
                  Macro expansion
                  x + y
                  ===>
                  binop% HAdd.hAdd✝ x y
                    x + y : Nat @ ⟨23, 19⟩†-⟨23, 24⟩ @ Lean.Elab.Term.BinOp.elabBinOp
                      x : Nat @ ⟨23, 19⟩-⟨23, 20⟩ @ Lean.Elab.Term.elabIdent
                        x : Nat @ ⟨23, 19⟩-⟨23, 20⟩
                      y : Nat @ ⟨23, 23⟩-⟨23, 24⟩ @ Lean.Elab.Term.elabIdent
                        y : Nat @ ⟨23, 23⟩-⟨23, 24⟩
                x - y : Nat @ ⟨23, 26⟩-⟨23, 31⟩ @ myMacro._@.Init.Notation._hyg.6221
                  Macro expansion
                  x - y
                  ===>
                  binop% HSub.hSub✝ x y
                    x - y : Nat @ ⟨23, 26⟩†-⟨23, 31⟩ @ Lean.Elab.Term.BinOp.elabBinOp
                      x : Nat @ ⟨23, 26⟩-⟨23, 27⟩ @ Lean.Elab.Term.elabIdent
                        x : Nat @ ⟨23, 26⟩-⟨23, 27⟩
                      y : Nat @ ⟨23, 30⟩-⟨23, 31⟩ @ Lean.Elab.Term.elabIdent
                        y : Nat @ ⟨23, 30⟩-⟨23, 31⟩
          x✝ : Nat × Nat @ ⟨23, 4⟩†-⟨25, 10⟩†
          match x✝ with 
          | (z, w) =>
            let z1 := z + w;
            z + z1 : Nat @ ⟨23, 4⟩†-⟨25, 10⟩ @ Lean.Elab.Term.elabMatch
            Prod.mk : {α : Type ?u} → {β : Type ?u} → α → β → α × β @ ⟨23, 4⟩†-⟨25, 10⟩†
            [.] `z : none @ ⟨23, 9⟩-⟨23, 10⟩
            [.] `w : none @ ⟨23, 12⟩-⟨23, 13⟩
            (z, w) : Nat × Nat @ ⟨23, 4⟩†-⟨23, 13⟩ @ Lean.Elab.Term.elabApp
              Prod.mk : {α β : Type} → α → β → α × β @ ⟨23, 4⟩†-⟨25, 10⟩†
              Nat : Type @ ⟨23, 4⟩†-⟨23, 13⟩† @ Lean.Elab.Term.elabHole
              Nat : Type @ ⟨23, 4⟩†-⟨23, 13⟩† @ Lean.Elab.Term.elabHole
              z : Nat @ ⟨23, 9⟩-⟨23, 10⟩ @ Lean.Elab.Term.elabIdent
                z : Nat @ ⟨23, 9⟩-⟨23, 10⟩
              w : Nat @ ⟨23, 12⟩-⟨23, 13⟩ @ Lean.Elab.Term.elabIdent
                w : Nat @ ⟨23, 12⟩-⟨23, 13⟩
            let z1 := z + w;
            z + z1 : Nat @ ⟨24, 4⟩-⟨25, 10⟩ @ Lean.Elab.Term.elabLetDecl
              Nat : Type @ ⟨24, 8⟩†-⟨24, 10⟩† @ Lean.Elab.Term.elabHole
              z + w : Nat @ ⟨24, 14⟩-⟨24, 19⟩ @ myMacro._@.Init.Notation._hyg.6125
                Macro expansion
                z + w
                ===>
                binop% HAdd.hAdd✝ z w
                  z + w : Nat @ ⟨24, 14⟩†-⟨24, 19⟩ @ Lean.Elab.Term.BinOp.elabBinOp
                    z : Nat @ ⟨24, 14⟩-⟨24, 15⟩ @ Lean.Elab.Term.elabIdent
                      z : Nat @ ⟨24, 14⟩-⟨24, 15⟩
                    w : Nat @ ⟨24, 18⟩-⟨24, 19⟩ @ Lean.Elab.Term.elabIdent
                      w : Nat @ ⟨24, 18⟩-⟨24, 19⟩
              z1 : Nat @ ⟨24, 8⟩-⟨24, 10⟩
              z + z1 : Nat @ ⟨25, 4⟩-⟨25, 10⟩ @ myMacro._@.Init.Notation._hyg.6125
                Macro expansion
                z + z1
                ===>
                binop% HAdd.hAdd✝ z z1
                  z + z1 : Nat @ ⟨25, 4⟩†-⟨25, 10⟩ @ Lean.Elab.Term.BinOp.elabBinOp
                    z : Nat @ ⟨25, 4⟩-⟨25, 5⟩ @ Lean.Elab.Term.elabIdent
                      z : Nat @ ⟨25, 4⟩-⟨25, 5⟩
                    z1 : Nat @ ⟨25, 8⟩-⟨25, 10⟩ @ Lean.Elab.Term.elabIdent
                      z1 : Nat @ ⟨25, 8⟩-⟨25, 10⟩
[Elab.info] command @ ⟨27, 0⟩-⟨28, 17⟩ @ Lean.Elab.Command.elabDeclaration
  Nat × Array (Array Nat) : Type @ ⟨27, 12⟩-⟨27, 35⟩ @ myMacro._@.Init.Notation._hyg.2315
    Macro expansion
    Nat × Array (Array Nat)
    ===>
    Prod✝ Nat (Array (Array Nat))
      Nat × Array (Array Nat) : Type @ ⟨27, 12⟩†-⟨27, 35⟩ @ Lean.Elab.Term.elabApp
        Prod : Type → Type → Type @ ⟨27, 12⟩†-⟨27, 35⟩†
        Nat : Type @ ⟨27, 12⟩-⟨27, 15⟩ @ Lean.Elab.Term.elabIdent
          [.] `Nat : some Type.{?_uniq.755} @ ⟨27, 12⟩-⟨27, 15⟩
          Nat : Type @ ⟨27, 12⟩-⟨27, 15⟩
        Array (Array Nat) : Type @ ⟨27, 18⟩-⟨27, 35⟩ @ Lean.Elab.Term.elabApp
          [.] `Array : some Type.{?_uniq.754} @ ⟨27, 18⟩-⟨27, 23⟩
          Array : Type → Type @ ⟨27, 18⟩-⟨27, 23⟩
          Array Nat : Type @ ⟨27, 24⟩-⟨27, 35⟩ @ Lean.Elab.Term.expandParen
            Macro expansion
            (Array Nat)
            ===>
            Array Nat
              Array Nat : Type @ ⟨27, 25⟩-⟨27, 34⟩ @ Lean.Elab.Term.elabApp
                [.] `Array : some Type.{?_uniq.756} @ ⟨27, 25⟩-⟨27, 30⟩
                Array : Type → Type @ ⟨27, 25⟩-⟨27, 30⟩
                Nat : Type @ ⟨27, 31⟩-⟨27, 34⟩ @ Lean.Elab.Term.elabIdent
                  [.] `Nat : some Type.{?_uniq.757} @ ⟨27, 31⟩-⟨27, 34⟩
                  Nat : Type @ ⟨27, 31⟩-⟨27, 34⟩
  s : Nat × Array (Array Nat) @ ⟨27, 8⟩-⟨27, 9⟩
  Array Nat : Type @ ⟨27, 39⟩-⟨27, 48⟩ @ Lean.Elab.Term.elabApp
    [.] `Array : some Sort.{?_uniq.759} @ ⟨27, 39⟩-⟨27, 44⟩
    Array : Type → Type @ ⟨27, 39⟩-⟨27, 44⟩
    Nat : Type @ ⟨27, 45⟩-⟨27, 48⟩ @ Lean.Elab.Term.elabIdent
      [.] `Nat : some Type.{?_uniq.760} @ ⟨27, 45⟩-⟨27, 48⟩
      Nat : Type @ ⟨27, 45⟩-⟨27, 48⟩
  Array.push (Array.getOp s.snd 1) s.fst : Array Nat @ ⟨28, 2⟩-⟨28, 17⟩ @ Lean.Elab.Term.elabApp
    s : Nat × Array (Array Nat) @ ⟨28, 2⟩-⟨28, 3⟩
    Prod.snd : {α β : Type} → α × β → β @ ⟨28, 4⟩-⟨28, 5⟩
    Array.getOp : {α : Type} → [inst : Inhabited α] → Array α → Nat → α @ ⟨28, 5⟩-⟨28, 6⟩
    1 : Nat @ ⟨28, 6⟩-⟨28, 7⟩ @ Lean.Elab.Term.elabNumLit
    [.] Array.getOp s.snd 1 : Array Nat @ ⟨28, 2⟩-⟨28, 8⟩ : some Array.{0} Nat
    Array.push : {α : Type} → Array α → α → Array α @ ⟨28, 9⟩-⟨28, 13⟩
    s.fst : Nat @ ⟨28, 14⟩-⟨28, 17⟩ @ Lean.Elab.Term.elabProj
      s : Nat × Array (Array Nat) @ ⟨28, 14⟩-⟨28, 15⟩
      Prod.fst : {α β : Type} → α × β → α @ ⟨28, 16⟩-⟨28, 17⟩
[Elab.info] command @ ⟨30, 0⟩-⟨31, 20⟩ @ Lean.Elab.Command.elabDeclaration
  B : Type @ ⟨30, 14⟩-⟨30, 15⟩ @ Lean.Elab.Term.elabIdent
    [.] `B : some Sort.{?_uniq.803} @ ⟨30, 14⟩-⟨30, 15⟩
    B : Type @ ⟨30, 14⟩-⟨30, 15⟩
  arg : B @ ⟨30, 8⟩-⟨30, 11⟩
  Nat : Type @ ⟨30, 19⟩-⟨30, 22⟩ @ Lean.Elab.Term.elabIdent
    [.] `Nat : some Sort.{?_uniq.805} @ ⟨30, 19⟩-⟨30, 22⟩
    Nat : Type @ ⟨30, 19⟩-⟨30, 22⟩
  A.val arg.pair.fst 0 : Nat @ ⟨31, 2⟩-⟨31, 20⟩ @ Lean.Elab.Term.elabApp
    arg : B @ ⟨31, 2⟩-⟨31, 5⟩
    [.] arg : B @ ⟨31, 2⟩-⟨31, 18⟩ : some Nat
    B.pair : B → A × A @ ⟨31, 6⟩-⟨31, 10⟩
    [.] arg.pair : A × A @ ⟨31, 2⟩-⟨31, 18⟩ : some Nat
    Prod.fst : {α β : Type} → α × β → α @ ⟨31, 11⟩-⟨31, 14⟩
    [.] arg.pair.fst : A @ ⟨31, 2⟩-⟨31, 18⟩ : some Nat
    A.val : A → Nat → Nat @ ⟨31, 15⟩-⟨31, 18⟩
    0 : Nat @ ⟨31, 19⟩-⟨31, 20⟩ @ Lean.Elab.Term.elabNumLit
[Elab.info] command @ ⟨33, 0⟩-⟨35, 1⟩ @ Lean.Elab.Command.elabDeclaration
  Nat : Type @ ⟨33, 12⟩-⟨33, 15⟩ @ Lean.Elab.Term.elabIdent
    [.] `Nat : some Sort.{?_uniq.827} @ ⟨33, 12⟩-⟨33, 15⟩
    Nat : Type @ ⟨33, 12⟩-⟨33, 15⟩
  x : Nat @ ⟨33, 8⟩-⟨33, 9⟩
  B : Type @ ⟨33, 19⟩-⟨33, 20⟩ @ Lean.Elab.Term.elabIdent
    [.] `B : some Sort.{?_uniq.829} @ ⟨33, 19⟩-⟨33, 20⟩
    B : Type @ ⟨33, 19⟩-⟨33, 20⟩
  { pair := ({ val := id }, { val := id }) } : B @ ⟨33, 24⟩-⟨35, 1⟩ @ Lean.Elab.Term.StructInst.elabStructInst
    ({ val := id }, { val := id }) : A × A @ ⟨34, 10⟩-⟨34, 40⟩ @ Lean.Elab.Term.expandParen
      Macro expansion
      ({ val := id }, { val := id })
      ===>
      Prod.mk✝ { val := id } { val := id }
        ({ val := id }, { val := id }) : A × A @ ⟨34, 10⟩†-⟨34, 39⟩ @ Lean.Elab.Term.elabApp
          Prod.mk : {α β : Type} → α → β → α × β @ ⟨34, 10⟩†-⟨34, 40⟩†
          { val := id } : A @ ⟨34, 11⟩-⟨34, 24⟩ @ Lean.Elab.Term.StructInst.elabStructInst
            id : Nat → Nat @ ⟨34, 20⟩-⟨34, 22⟩ @ Lean.Elab.Term.elabIdent
              [.] `id : some Nat -> Nat @ ⟨34, 20⟩-⟨34, 22⟩
              id : {α : Type} → α → α @ ⟨34, 20⟩-⟨34, 22⟩
            val : Nat → Nat := id @ ⟨34, 13⟩-⟨34, 16⟩
          { val := id } : A @ ⟨34, 26⟩-⟨34, 39⟩ @ Lean.Elab.Term.StructInst.elabStructInst
            id : Nat → Nat @ ⟨34, 35⟩-⟨34, 37⟩ @ Lean.Elab.Term.elabIdent
              [.] `id : some Nat -> Nat @ ⟨34, 35⟩-⟨34, 37⟩
              id : {α : Type} → α → α @ ⟨34, 35⟩-⟨34, 37⟩
            val : Nat → Nat := id @ ⟨34, 28⟩-⟨34, 31⟩
    pair : A × A := ({ val := id }, { val := id }) @ ⟨34, 2⟩-⟨34, 6⟩
def Nat.xor : Nat → Nat → Nat :=
bitwise bne
[Elab.info] command @ ⟨37, 0⟩-⟨38, 10⟩ @ Lean.Elab.Command.expandInCmd
  command @ ⟨37, 0⟩†-⟨38, 10⟩† @ Lean.Elab.Command.elabSection
  command @ ⟨37, 0⟩-⟨37, 8⟩ @ Lean.Elab.Command.elabOpen
  command @ ⟨38, 0⟩-⟨38, 10⟩ @ Lean.Elab.Command.elabPrint
    xor : Nat → Nat → Nat @ ⟨38, 7⟩-⟨38, 10⟩
  command @ ⟨37, 0⟩†-⟨38, 10⟩† @ Lean.Elab.Command.elabEnd

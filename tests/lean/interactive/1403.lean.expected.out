{"textDocument": {"uri": "file:///1403.lean"},
 "position": {"line": 1, "character": 2}}
{"range":
 {"start": {"line": 1, "character": 2}, "end": {"line": 1, "character": 12}},
 "contents":
 {"value":
  "- `rewrite [e]` rewrites target of the main goal using the rewrite rule `e`,\n  a proof of `a = b` or `a ↔ b`. Each occurrence of `a` is replaced with `b`.\n  The rule may be conditional, and in that case the tactic will add side goals for\n  these conditions to the end of the goal list.\n- `rewrite [← e]` rewrites in the reverse direction, instead replacing occurrences of `b` with `a`.\n- `rewrite [c]`, where `c` is a constant, rewrites using the equation theorems for `c`,\n  providing a convenient way to unfold `c`. Refolding is supported using `←`.\n- `rewrite [e] at l` rewrites at location(s) `l`, where `l` is either `*` or a\n  list of locations, each of which is a local hypothesis or a turnstile (`⊢` or `|-`),\n  which signifies the target of the goal.\n- `rewrite [e] by tacticSeq` uses the tactic sequence to discharge side goals from conditional rewrite rules.\n- `rewrite [e₁, ..., eₙ]` rewrites with the given rewrite rules sequentially.\n- `rw [e, ...]` is `rewrite [e, ...]; try with_reducible rfl`. It rewrites and then attempts\n  to close the main goal using a \"cheap\" `rfl` that can only unfold reducible definitions.\n\nUsing `rw (occs := [1,3,5]) [e]` controls which \"occurrences\" are rewritten.\n(This option applies to each rule, so usually this will only be used with a single rule.)\nOccurrences count from `1`.\nAt each allowed occurrence, arguments of the rewrite rule `e` may be instantiated,\nrestricting which later rewrites can be found.\n(Disallowed occurrences do not result in instantiation.)\n`(occs := .neg [1,3,5])` allows skipping specified occurrences.\n",
  "kind": "markdown"}}

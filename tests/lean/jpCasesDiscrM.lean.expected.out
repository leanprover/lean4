[Compiler.saveBase] size: 7
    def f1 c a b : Nat :=
      cases c : Nat
      | Bool.false =>
        let _x.1 := Nat.add a b;
        return _x.1
      | Bool.true =>
        let _x.2 := Nat.add a b;
        let _x.3 := Nat.mul b a;
        let _x.4 := Nat.add _x.2 _x.3;
        return _x.4
[Compiler.saveBase] size: 12
    def f2 c a b : Nat :=
      jp _jp.1 d y z : Nat :=
        cases d : Nat
        | Bool.false =>
          let _x.2 := Nat.add z y;
          return _x.2
        | Bool.true =>
          let _x.3 := Nat.add y z;
          let _x.4 := Nat.mul z y;
          let _x.5 := Nat.add _x.3 _x.4;
          return _x.5;
      cases c : Nat
      | Bool.false =>
        goto _jp.1 c b a
      | Bool.true =>
        goto _jp.1 c a b
[Compiler.saveBase] size: 20
    def f3 c c' a b : Nat :=
      jp _jp.1 y z d : Nat :=
        cases d : Nat
        | C.c1 =>
          let _x.2 := Nat.add y z;
          let _x.3 := Nat.mul z y;
          let _x.4 := Nat.add _x.2 _x.3;
          return _x.4
        | C.c3 =>
          let _x.5 := Nat.mul y y;
          let _x.6 := Nat.add _x.5 a;
          return _x.6
        | _ =>
          let _x.7 := Nat.add z y;
          let _x.8 := Nat.add _x.7 y;
          return _x.8;
      cases c : Nat
      | C.c1 =>
        goto _jp.1 a b c
      | C.c2 =>
        goto _jp.1 b b c
      | C.c3 =>
        goto _jp.1 b a c'
      | C.c4 =>
        goto _jp.1 a a c'

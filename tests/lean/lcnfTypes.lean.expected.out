Vec.zip : {α : Type u_1} → {n : Nat} → {β : Type u_2} → Vec α ◾ → Vec β ◾ → Vec (α × β) ◾
mkConstTuple : {α : Type u_1} → α → Nat → ◾
Fin.add : {n : Nat} → Fin ◾ → Fin ◾ → Fin ◾
Vec.cons : {α : Type u} → {n : Nat} → α → Vec α ◾ → Vec α ◾
Eq.rec : {α : Sort u_1} → {a : α} → {motive : α → ◾ → Sort u} → motive ◾ ◾ → {a : α} → ◾ → motive ◾ ◾
GetElem.getElem : {cont : Type u} →
  {idx : Type v} →
    {elem : Type w} → {dom : cont → idx → Prop} → [self : GetElem cont idx elem ◾] → cont → idx → ◾ → elem
Term.constFold : {ctx : List Ty} → {ty : Ty} → _root_.Term ◾ ◾ → _root_.Term ◾ ◾
Term.denote : {ctx : List Ty} → {ty : Ty} → _root_.Term ◾ ◾ → HList ◾ ◾ → ◾
HList.get : {α : Type u_1} → {β : α → Type u_2} → {is : List α} → {i : α} → HList β ◾ → Member ◾ ◾ → β ◾
Member.head : {α : Type u_1} → {a : α} → {as : List α} → Member ◾ ◾
Ty.denote : Ty → Type
MonadControl.liftWith : {m : Type u → Type v} →
  {n : Type u → Type w} → [self : MonadControl m n] → {α : Type u} → (({β : Type u} → n β → m ◾) → m α) → n α
MonadControl.restoreM : {m : Type u → Type v} → {n : Type u → Type w} → [self : MonadControl m n] → {α : Type u} → m ◾ → n α
Decidable.casesOn : {p : Prop} → {motive : Decidable ◾ → Sort u} → Decidable ◾ → (◾ → motive ◾) → (◾ → motive ◾) → motive ◾
Lean.getConstInfo : {m : Type → Type} → [inst : Monad m] → [inst : MonadEnv m] → [inst : MonadError m] → Name → m ConstantInfo
Lean.Meta.instMonadMetaM : Monad fun α =>
  Context → ST.Ref PUnit State → Core.Context → ST.Ref PUnit Core.State → PUnit → EStateM.Result Exception PUnit α
Lean.Meta.inferType : Expr →
  Context → ST.Ref PUnit State → Core.Context → ST.Ref PUnit Core.State → PUnit → EStateM.Result Exception PUnit Expr
Lean.Elab.Term.elabTerm : Syntax →
  Option Expr →
    Bool →
      Bool →
        Elab.Term.Context →
          ST.Ref PUnit Elab.Term.State →
            Context →
              ST.Ref PUnit State → Core.Context → ST.Ref PUnit Core.State → PUnit → EStateM.Result Exception PUnit Expr
Nat.add : Nat → Nat → Nat
Magma.mul : Magma → ◾ → ◾ → ◾
weird1 : Bool → ◾
lamAny₁ : Bool → Monad ◾
lamAny₂ : Bool → Monad ◾
Term.constFold : List Ty → Ty → _root_.Term ◾ ◾ → _root_.Term ◾ ◾
Term.denote : List Ty → Ty → _root_.Term ◾ ◾ → HList Ty ◾ ◾ → ◾
HList.get : ◾ → ◾ → List ◾ → ◾ → HList ◾ ◾ ◾ → Member ◾ ◾ ◾ → ◾
Member.head : ◾ → ◾ → List ◾ → Member ◾ ◾ ◾
Ty.denote : ◾
MonadControl.liftWith : ◾ → ◾ → MonadControl ◾ ◾ → ◾ → ((◾ → ◾ → ◾) → ◾) → ◾
MonadControl.restoreM : ◾ → ◾ → MonadControl ◾ ◾ → ◾ → ◾ → ◾
Decidable.casesOn : ◾ → ◾ → Bool → (◾ → ◾) → (◾ → ◾) → ◾
Lean.getConstInfo : ◾ → Monad ◾ → MonadEnv ◾ → MonadError ◾ → Name → ◾
Lean.Meta.instMonadMetaM : Monad ◾
Lean.Meta.inferType : Expr → Context → ◾ → Core.Context → ◾ → PUnit → EStateM.Result Exception PUnit Expr
Lean.Elab.Term.elabTerm : Syntax →
  Option Expr →
    Bool → Bool → Elab.Term.Context → ◾ → Context → ◾ → Core.Context → ◾ → PUnit → EStateM.Result Exception PUnit Expr
Nat.add : Nat → Nat → Nat
Fin.add : Nat → Nat → Nat → Nat
Lean.HashSetBucket.update : ◾ → Array (List ◾) → USize → List ◾ → ◾ → Array (List ◾)

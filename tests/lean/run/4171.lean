/-!
This is a minimization of a problem in Mathlib where a simp lemma `foo` would not fire,
but variants:
* `simp [(foo)]`
* `simp [foo.{v‚ÇÅ + 1}]`
* `simp [foo']`, where a `no_index` is added in the statement
all work.
-/

section Mathlib.Data.Opposite

universe v u

variable (Œ± : Sort u)

structure Opposite :=
  op ::
  unop : Œ±

notation:max Œ± "·µí·µñ" => Opposite Œ±

end Mathlib.Data.Opposite

section Mathlib.Combinatorics.Quiver.Basic

open Opposite

universe v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

class Quiver (V : Type u) where
  Hom : V ‚Üí V ‚Üí Sort v

infixr:10 " ‚ü∂ " => Quiver.Hom

structure Prefunctor (V : Type u‚ÇÅ) [Quiver.{v‚ÇÅ} V] (W : Type u‚ÇÇ) [Quiver.{v‚ÇÇ} W] where
  obj : V ‚Üí W
  map : ‚àÄ {X Y : V}, (X ‚ü∂ Y) ‚Üí (obj X ‚ü∂ obj Y)
namespace Quiver

instance opposite {V} [Quiver V] : Quiver V·µí·µñ :=
  ‚ü®fun a b => (unop b ‚ü∂ unop a)·µí·µñ‚ü©

def Hom.op {V} [Quiver V] {X Y : V} (f : X ‚ü∂ Y) : op Y ‚ü∂ op X := ‚ü®f‚ü©

def Hom.unop {V} [Quiver V] {X Y : V·µí·µñ} (f : X ‚ü∂ Y) : unop Y ‚ü∂ unop X := Opposite.unop f

end Quiver


end Mathlib.Combinatorics.Quiver.Basic

section Mathlib.CategoryTheory.Category.Basic

universe v u

namespace CategoryTheory

class CategoryStruct (obj : Type u) extends Quiver.{v + 1} obj : Type max u (v + 1) where
  id : ‚àÄ X : obj, Hom X X
  comp : ‚àÄ {X Y Z : obj}, (X ‚ü∂ Y) ‚Üí (Y ‚ü∂ Z) ‚Üí (X ‚ü∂ Z)

scoped notation "ùüô" => CategoryStruct.id

scoped infixr:80 " ‚â´ " => CategoryStruct.comp

class Category (obj : Type u) extends CategoryStruct.{v} obj : Type max u (v + 1) where
  id_comp : ‚àÄ {X Y : obj} (f : X ‚ü∂ Y), ùüô X ‚â´ f = f
  comp_id : ‚àÄ {X Y : obj} (f : X ‚ü∂ Y), f ‚â´ ùüô Y = f

attribute [simp] Category.id_comp Category.comp_id

end CategoryTheory

end Mathlib.CategoryTheory.Category.Basic

section Mathlib.CategoryTheory.Functor.Basic

namespace CategoryTheory

universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

structure Functor (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]
    extends Prefunctor C D : Type max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ where

infixr:26 " ‚•§ " => Functor

namespace Functor

section

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C]

protected def id : C ‚•§ C where
  obj X := X
  map f := f

notation "ùü≠" => Functor.id

variable {C}

@[simp]
theorem id_obj (X : C) : (ùü≠ C).obj X = X := rfl

end

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E]

@[simp]
def comp (F : C ‚•§ D) (G : D ‚•§ E) : C ‚•§ E where
  obj X := G.obj (F.obj X)
  map f := G.map (F.map f)

infixr:80 " ‚ãô " => Functor.comp

end Functor

end CategoryTheory


end Mathlib.CategoryTheory.Functor.Basic

section Mathlib.CategoryTheory.NatTrans

namespace CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

structure NatTrans (F G : C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where
  app : ‚àÄ X : C, F.obj X ‚ü∂ G.obj X

end CategoryTheory

end Mathlib.CategoryTheory.NatTrans

section Mathlib.CategoryTheory.Iso

universe v u

namespace CategoryTheory

open Category

structure Iso {C : Type u} [Category.{v} C] (X Y : C) where
  hom : X ‚ü∂ Y
  inv : Y ‚ü∂ X

infixr:10 " ‚âÖ " => Iso

variable {C : Type u} [Category.{v} C] {X Y Z : C}

namespace Iso

@[simp]
def symm (I : X ‚âÖ Y) : Y ‚âÖ X where
  hom := I.inv
  inv := I.hom

@[simp]
def refl (X : C) : X ‚âÖ X where
  hom := ùüô X
  inv := ùüô X

@[simp]
def trans (Œ± : X ‚âÖ Y) (Œ≤ : Y ‚âÖ Z) : X ‚âÖ Z where
  hom := Œ±.hom ‚â´ Œ≤.hom
  inv := Œ≤.inv ‚â´ Œ±.inv

infixr:80 " ‚â™‚â´ " => Iso.trans

end Iso

namespace Functor

universe u‚ÇÇ v‚ÇÇ

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

@[simp]
def mapIso (F : C ‚•§ D) {X Y : C} (i : X ‚âÖ Y) : F.obj X ‚âÖ F.obj Y where
  hom := F.map i.hom
  inv := F.map i.inv

end Functor

end CategoryTheory


end Mathlib.CategoryTheory.Iso

section Mathlib.CategoryTheory.Functor.Category

namespace CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D]

instance Functor.category : Category.{max u‚ÇÅ v‚ÇÇ} (C ‚•§ D) where
  Hom F G := NatTrans F G
  id F := sorry
  comp Œ± Œ≤ := sorry
  id_comp := sorry
  comp_id := sorry

end CategoryTheory

end Mathlib.CategoryTheory.Functor.Category

section Mathlib.CategoryTheory.NatIso


open CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

namespace CategoryTheory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

namespace Iso

@[simp]
def app {F G : C ‚•§ D} (Œ± : F ‚âÖ G) (X : C) : F.obj X ‚âÖ G.obj X where
  hom := Œ±.hom.app X
  inv := Œ±.inv.app X

end Iso

namespace NatIso

variable {F G : C ‚•§ D} {X : C}

@[simp]
def ofComponents (app : ‚àÄ X : C, F.obj X ‚âÖ G.obj X) :
    F ‚âÖ G where
  hom :=
  { app := fun X => (app X).hom }
  inv :=
    { app := fun X => (app X).inv }

end NatIso


end CategoryTheory


end Mathlib.CategoryTheory.NatIso

section Mathlib.CategoryTheory.Equivalence

namespace CategoryTheory

open CategoryTheory.Functor NatIso Category

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

structure Equivalence (C : Type u‚ÇÅ) (D : Type u‚ÇÇ) [Category.{v‚ÇÅ} C] [Category.{v‚ÇÇ} D] where mk' ::
  functor : C ‚•§ D
  inverse : D ‚•§ C
  unitIso : ùü≠ C ‚âÖ functor ‚ãô inverse
  counitIso : inverse ‚ãô functor ‚âÖ ùü≠ D

infixr:10 " ‚âå " => Equivalence

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

@[simp]
def Equivalence.symm (e : C ‚âå D) : D ‚âå C :=
  ‚ü®e.inverse, e.functor, e.counitIso.symm, e.unitIso.symm‚ü©

end CategoryTheory


end Mathlib.CategoryTheory.Equivalence

section Mathlib.CategoryTheory.Opposites

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open Opposite

variable {C : Type u‚ÇÅ}

@[simp]
theorem Quiver.Hom.unop_op [Quiver.{v‚ÇÅ} C] {X Y : C} (f : X ‚ü∂ Y) : f.op.unop = f :=
  rfl

namespace CategoryTheory

variable [Category.{v‚ÇÅ} C]

instance Category.opposite : Category.{v‚ÇÅ} C·µí·µñ where
  comp f g := (g.unop ‚â´ f.unop).op
  id X := (ùüô (unop X)).op
  id_comp := sorry
  comp_id := sorry

protected def Iso.op {X Y : C} (Œ± : X ‚âÖ Y) : op Y ‚âÖ op X where
  hom := Œ±.hom.op
  inv := Œ±.inv.op

end CategoryTheory


end Mathlib.CategoryTheory.Opposites

section Mathlib.CategoryTheory.Monoidal.Category

universe v u

namespace CategoryTheory

class MonoidalCategoryStruct (C : Type u) [ùíû : Category.{v} C] where
  tensorObj : C ‚Üí C ‚Üí C
  whiskerLeft (X : C) {Y‚ÇÅ Y‚ÇÇ : C} (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) : tensorObj X Y‚ÇÅ ‚ü∂ tensorObj X Y‚ÇÇ
  whiskerRight {X‚ÇÅ X‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Y : C) : tensorObj X‚ÇÅ Y ‚ü∂ tensorObj X‚ÇÇ Y
  tensorHom {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g: X‚ÇÇ ‚ü∂ Y‚ÇÇ) : (tensorObj X‚ÇÅ X‚ÇÇ ‚ü∂ tensorObj Y‚ÇÅ Y‚ÇÇ) :=
    whiskerRight f X‚ÇÇ ‚â´ whiskerLeft Y‚ÇÅ g
  tensorUnit : C
  rightUnitor : ‚àÄ X : C, tensorObj X tensorUnit ‚âÖ X

namespace MonoidalCategory

scoped infixr:70 " ‚äó " => MonoidalCategoryStruct.tensorObj
scoped infixr:81 " ‚óÅ " => MonoidalCategoryStruct.whiskerLeft
scoped infixl:81 " ‚ñ∑ " => MonoidalCategoryStruct.whiskerRight
scoped infixr:70 " ‚äó " => MonoidalCategoryStruct.tensorHom
scoped notation "ùüô_ " C:max => (MonoidalCategoryStruct.tensorUnit : C)
scoped notation "œÅ_" => MonoidalCategoryStruct.rightUnitor

end MonoidalCategory

open MonoidalCategory

class MonoidalCategory (C : Type u) [ùíû : Category.{v} C] extends MonoidalCategoryStruct C where
  id_whiskerRight : ‚àÄ (X Y : C), ùüô X ‚ñ∑ Y = ùüô (X ‚äó Y)

attribute [simp] MonoidalCategory.id_whiskerRight

namespace MonoidalCategory

variable {C : Type u} [ùíû : Category.{v} C] [MonoidalCategory C]

@[simp]
theorem id_tensorHom (X : C) {Y‚ÇÅ Y‚ÇÇ : C} (f : Y‚ÇÅ ‚ü∂ Y‚ÇÇ) :
    ùüô X ‚äó f = X ‚óÅ f := sorry

@[simp]
theorem tensorHom_id {X‚ÇÅ X‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (Y : C) :
    f ‚äó ùüô Y = f ‚ñ∑ Y := sorry

end MonoidalCategory

@[simp]
def tensorIso {C : Type u} {X Y X' Y' : C} [Category.{v} C] [MonoidalCategory.{v} C] (f : X ‚âÖ Y)
    (g : X' ‚âÖ Y') : X ‚äó X' ‚âÖ Y ‚äó Y' where
  hom := f.hom ‚äó g.hom
  inv := f.inv ‚äó g.inv

infixr:70 " ‚äó " => tensorIso

end CategoryTheory

end Mathlib.CategoryTheory.Monoidal.Category

section Mathlib.CategoryTheory.Monoidal.Opposite

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]

open Opposite MonoidalCategory

instance monoidalCategoryOp : MonoidalCategory C·µí·µñ where
  tensorObj X Y := op (unop X ‚äó unop Y)
  whiskerLeft X _ _ f := (X.unop ‚óÅ f.unop).op
  whiskerRight f X := (f.unop ‚ñ∑ X.unop).op
  tensorHom f g := (f.unop ‚äó g.unop).op
  tensorUnit := op (ùüô_ C)
  id_whiskerRight := sorry
  rightUnitor X := (œÅ_ (unop X)).symm.op


@[simp] theorem op_whiskerLeft (X : C) {Y Z : C} (f : Y ‚ü∂ Z) :
    (X ‚óÅ f).op = op X ‚óÅ f.op := rfl
@[simp] theorem unop_whiskerLeft (X : C·µí·µñ) {Y Z : C·µí·µñ} (f : Y ‚ü∂ Z) :
    (X ‚óÅ f).unop =  unop X ‚óÅ f.unop := rfl

@[simp] theorem op_hom_rightUnitor (X : C) : (œÅ_ X).hom.op = (œÅ_ (op X)).inv := rfl
@[simp] theorem unop_hom_rightUnitor (X : C·µí·µñ) : (œÅ_ X).hom.unop = (œÅ_ (unop X)).inv := rfl

@[simp] theorem op_inv_rightUnitor (X : C) : (œÅ_ X).inv.op = (œÅ_ (op X)).hom := rfl
@[simp] theorem unop_inv_rightUnitor (X : C·µí·µñ) : (œÅ_ X).inv.unop = (œÅ_ (unop X)).hom := rfl

end CategoryTheory


end Mathlib.CategoryTheory.Monoidal.Opposite

section Mathlib.CategoryTheory.Monoidal.Transport

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

noncomputable section

open CategoryTheory Category MonoidalCategory

namespace CategoryTheory.Monoidal

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]
variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

abbrev induced [MonoidalCategoryStruct D] (F : D ‚•§ C) :
    MonoidalCategory.{v‚ÇÇ} D where
  id_whiskerRight X Y := sorry

def transportStruct (e : C ‚âå D) : MonoidalCategoryStruct.{v‚ÇÇ} D where
  tensorObj X Y := e.functor.obj (e.inverse.obj X ‚äó e.inverse.obj Y)
  whiskerLeft X _ _ f := e.functor.map (e.inverse.obj X ‚óÅ e.inverse.map f)
  whiskerRight f X := sorry
  tensorHom f g := sorry
  tensorUnit := e.functor.obj (ùüô_ C)
  rightUnitor X :=
    e.functor.mapIso ((Iso.refl _ ‚äó (e.unitIso.app _).symm) ‚â™‚â´ œÅ_ (e.inverse.obj X)) ‚â™‚â´
      e.counitIso.app _

@[simp] theorem transportStruct_whiskerLeft (e : C ‚âå D) (X x x_1 : D) (f : x ‚ü∂ x_1) :
  (transportStruct e).whiskerLeft X f = e.functor.map (e.inverse.obj X ‚óÅ e.inverse.map f) := rfl

@[simp] theorem transportStruct_rightUnitor (e : C ‚âå D) (X : D) :
  (transportStruct e).rightUnitor X =
    e.functor.mapIso ((Iso.refl _ ‚äó (e.unitIso.app _).symm) ‚â™‚â´ œÅ_ (e.inverse.obj X)) ‚â™‚â´
      e.counitIso.app _ := rfl

def transport (e : C ‚âå D) : MonoidalCategory.{v‚ÇÇ} D :=
  letI : MonoidalCategoryStruct.{v‚ÇÇ} D := transportStruct e
  induced e.inverse

end CategoryTheory.Monoidal

end

end Mathlib.CategoryTheory.Monoidal.Transport

section Mathlib.CategoryTheory.Monoidal.Braided.Basic

open CategoryTheory MonoidalCategory

universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace CategoryTheory

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [MonoidalCategory C]

def tensor_Œº (X Y : C √ó C) : (X.1 ‚äó X.2) ‚äó Y.1 ‚äó Y.2 ‚ü∂ (X.1 ‚äó Y.1) ‚äó X.2 ‚äó Y.2 :=
  sorry

end CategoryTheory

end Mathlib.CategoryTheory.Monoidal.Braided.Basic

section Mathlib.CategoryTheory.Monoidal.Mon_

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ u

open CategoryTheory MonoidalCategory

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]

structure Mon_ where
  X : C
  one : ùüô_ C ‚ü∂ X
  mul : X ‚äó X ‚ü∂ X
  mul_one : (X ‚óÅ one) ‚â´ mul = (œÅ_ X).hom

attribute [simp] Mon_.mul_one
namespace Mon_

@[simp]
def trivial : Mon_ C where
  X := ùüô_ C
  one := ùüô _
  mul := sorry
  mul_one := sorry

variable {C}
variable {M : Mon_ C}

structure Hom (M N : Mon_ C) where
  hom : M.X ‚ü∂ N.X

@[simp]
def id (M : Mon_ C) : Hom M M where
  hom := ùüô M.X

@[simp]
def comp {M N O : Mon_ C} (f : Hom M N) (g : Hom N O) : Hom M O where
  hom := f.hom ‚â´ g.hom

instance : Category (Mon_ C) where
  Hom M N := Hom M N
  id := id
  comp f g := comp f g
  id_comp := sorry
  comp_id := sorry

@[ext]
theorem ext {X Y : Mon_ C} {f g : X ‚ü∂ Y} (w : f.hom = g.hom) : f = g := sorry

@[simp]
theorem id_hom' (M : Mon_ C) : (ùüô M : Hom M M).hom = ùüô M.X := sorry

@[simp]
theorem comp_hom' {M N K : Mon_ C} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
    (f ‚â´ g : Hom M K).hom = f.hom ‚â´ g.hom := sorry

variable (C) in
@[simp]
def forget : Mon_ C ‚•§ C where
  obj A := A.X
  map f := f.hom

@[simp]
def isoOfIso {M N : Mon_ C} (f : M.X ‚âÖ N.X) : M ‚âÖ N where
  hom := { hom := f.hom }
  inv := { hom := f.inv }



@[simp]
instance monMonoidalStruct : MonoidalCategoryStruct (Mon_ C) :=
  let tensorObj (M N : Mon_ C) : Mon_ C :=
    { X := M.X ‚äó N.X
      one := sorry
      mul := tensor_Œº C (M.X, N.X) (M.X, N.X) ‚â´ (M.mul ‚äó N.mul)
      mul_one := sorry }
  let tensorHom {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : Mon_ C} (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂ Y‚ÇÇ) :
      tensorObj _ _ ‚ü∂ tensorObj _ _ :=
    { hom := f.hom ‚äó g.hom }
  { tensorObj := tensorObj
    tensorHom := tensorHom
    whiskerRight := fun f Y => tensorHom f (ùüô Y)
    whiskerLeft := fun X _ _ g => tensorHom (ùüô X) g
    tensorUnit := trivial C
    rightUnitor := fun M ‚Ü¶ isoOfIso (œÅ_ M.X) }

@[simp]
theorem whiskerLeft_hom {X Y : Mon_ C} (f : X ‚ü∂ Y) (Z : Mon_ C) :
    (f ‚ñ∑ Z).hom = f.hom ‚ñ∑ Z.X := by
  rw [‚Üê tensorHom_id]; rfl

@[simp]
theorem whiskerRight_hom (X : Mon_ C) {Y Z : Mon_ C} (f : Y ‚ü∂ Z) :
    (X ‚óÅ f).hom = X.X ‚óÅ f.hom := by
  rw [‚Üê id_tensorHom]; rfl

@[simp]
theorem rightUnitor_inv_hom (X : Mon_ C) : (œÅ_ X).inv.hom = (œÅ_ X.X).inv := rfl

instance monMonoidal : MonoidalCategory (Mon_ C) where
  id_whiskerRight := sorry

end Mon_

end Mathlib.CategoryTheory.Monoidal.Mon_

section Mathlib.CategoryTheory.Monoidal.Comon_

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ u

open CategoryTheory MonoidalCategory

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]

structure Comon_ where
  X : C
  counit : X ‚ü∂ ùüô_ C
  comul : X ‚ü∂ X ‚äó X

namespace Comon_

variable {C}
variable {M : Comon_ C}

structure Hom (M N : Comon_ C) where
  hom : M.X ‚ü∂ N.X

@[simp]
def id (M : Comon_ C) : Hom M M where
  hom := ùüô M.X

@[simp]
def comp {M N O : Comon_ C} (f : Hom M N) (g : Hom N O) : Hom M O where
  hom := f.hom ‚â´ g.hom

instance : Category (Comon_ C) where
  Hom M N := Hom M N
  id := id
  comp f g := comp f g
  comp_id := sorry
  id_comp := sorry

@[ext] theorem ext {X Y : Comon_ C} {f g : X ‚ü∂ Y} (w : f.hom = g.hom) : f = g := sorry

@[simp] theorem id_hom' (M : Comon_ C) : (ùüô M : Hom M M).hom = ùüô M.X := rfl

@[simp]
theorem comp_hom' {M N K : Comon_ C} (f : M ‚ü∂ N) (g : N ‚ü∂ K) : (f ‚â´ g).hom = f.hom ‚â´ g.hom :=
  rfl

open Opposite

variable (C)

def Comon_to_Mon_op_op_obj' (A : Comon_ C) : Mon_ (C·µí·µñ) where
  X := op A.X
  one := A.counit.op
  mul := A.comul.op
  mul_one := sorry

@[simp] theorem Comon_to_Mon_op_op_obj'_X (A : Comon_ C) : (Comon_to_Mon_op_op_obj' C A).X = op A.X := rfl

@[simp] def Comon_to_Mon_op_op : Comon_ C ‚•§ (Mon_ (C·µí·µñ))·µí·µñ where
  obj A := op (Comon_to_Mon_op_op_obj' C A)
  map := fun f => op <| { hom := f.hom.op }

def Mon_op_op_to_Comon_obj' (A : (Mon_ (C·µí·µñ))) : Comon_ C where
  X := unop A.X
  counit := A.one.unop
  comul := A.mul.unop

@[simp] theorem Mon_op_op_to_Comon_obj'_X (A : (Mon_ (C·µí·µñ))) : (Mon_op_op_to_Comon_obj' C A).X = unop A.X := rfl

@[simp]
def Mon_op_op_to_Comon : (Mon_ (C·µí·µñ))·µí·µñ ‚•§ Comon_ C where
  obj A := Mon_op_op_to_Comon_obj' C (unop A)
  map := fun f =>
    { hom := f.unop.hom.unop }

@[simp]
def Comon_equiv_Mon_op_op : Comon_ C ‚âå (Mon_ (C·µí·µñ))·µí·µñ :=
  { functor := Comon_to_Mon_op_op C
    inverse := Mon_op_op_to_Comon C
    unitIso := NatIso.ofComponents (fun _ => Iso.refl _)
    counitIso := NatIso.ofComponents (fun _ => Iso.refl _) }

instance : MonoidalCategory (Comon_ C) :=
  Monoidal.transport (Comon_equiv_Mon_op_op C).symm

end Comon_

namespace CategoryTheory.Functor

variable {C} {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory.{v‚ÇÇ} D]

def mapComon (F : C ‚•§ D) : Comon_ C ‚•§ Comon_ D where
  obj A :=
    { X := F.obj A.X
      counit := sorry
      comul := sorry }
  map f := sorry

end CategoryTheory.Functor


end Mathlib.CategoryTheory.Monoidal.Comon_

section Mathlib.CategoryTheory.Monoidal.Bimon_

noncomputable section

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ u

open CategoryTheory MonoidalCategory

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]

def toComon_ : Comon_ (Mon_ C) ‚•§ Comon_ C := (Mon_.forget C).mapComon

@[simp] theorem toComon_obj_X (M : Comon_ (Mon_ C)) : ((toComon_ C).obj M).X = M.X.X := rfl

theorem foo {V} [Quiver V] {X Y x} :
    @Quiver.Hom.unop V _ X Y (Opposite.op (unop := x)) = x := rfl

example (M : Comon_ (Mon_ C)) : Mon_ (Comon_ C) where
  X := (toComon_ C).obj M
  one := { hom := M.X.one }
  mul := { hom := M.X.mul }
  mul_one := by
    ext
    simp [(foo)] -- parentheses around `foo` works

example (M : Comon_ (Mon_ C)) : Mon_ (Comon_ C) where
  X := (toComon_ C).obj M
  one := { hom := M.X.one }
  mul := { hom := M.X.mul }
  mul_one := by
    ext
    simp [foo.{_, v‚ÇÅ + 1}] -- specifying the universe level explicitly works!

theorem foo' {V} [Quiver V] {X Y x} :
    @Quiver.Hom.unop V _ X Y no_index (Opposite.op (unop := x)) = x := rfl

example (M : Comon_ (Mon_ C)) : Mon_ (Comon_ C) where
  X := (toComon_ C).obj M
  one := { hom := M.X.one }
  mul := { hom := M.X.mul }
  mul_one := by
    ext
    simp [foo'] -- or adding a `no_index` in the statement


/--
info: [simp] theorems with bad keys
    foo, key: @Quiver.Hom.unop _ _ _ _ (@Opposite.op (@Quiver.Hom _ _ _.1 _.1) _)use `set_option diagnostics.threshold <num>` to control threshold for reporting counters
-/
#guard_msgs in
example (M : Comon_ (Mon_ C)) : Mon_ (Comon_ C) where
  X := (toComon_ C).obj M
  one := { hom := M.X.one }
  mul := { hom := M.X.mul, }
  mul_one := by
    ext
    -- increase the threshold to ensure the guard_msgs docstring is not too big.
    set_option diagnostics.threshold 100000 in
    set_option diagnostics true in
    -- `index := false` ignores most of the discrimination tree structure.
    simp (config := { index := false }) [foo]

attribute [simp] foo

/--
info: [simp] theorems with bad keys
    foo, key: @Quiver.Hom.unop _ _ _ _ (@Opposite.op (@Quiver.Hom _ _ _.1 _.1) _)use `set_option diagnostics.threshold <num>` to control threshold for reporting counters
-/
#guard_msgs in
example (M : Comon_ (Mon_ C)) : Mon_ (Comon_ C) where
  X := (toComon_ C).obj M
  one := { hom := M.X.one }
  mul := { hom := M.X.mul, }
  mul_one := by
    ext
    -- increase the threshold to ensure the guard_msgs docstring is not too big.
    set_option diagnostics.threshold 100000 in
    set_option diagnostics true in
    -- `index := false` ignores most of the discrimination tree structure.
    simp (config := { index := false })

end

end Mathlib.CategoryTheory.Monoidal.Bimon_
